[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a researcher with a background in environmental engineering and geospatial technologies. R is my go-to coding language for data science and visualization as well as scientific report and article writing. This blog is meant to share some tip and tricks I have learned along the way. You can reach me at any of the links below!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes and scribbles",
    "section": "",
    "text": "STAC across Languages\n\n\n\n\n\n\n\nr-spatial\n\n\npython\n\n\nrstats\n\n\n\n\nSTAC on-demand data cubes with R and Python.\n\n\n\n\n\n\nOct 18, 2023\n\n\nLorena Abad\n\n\n\n\n\n\n  \n\n\n\n\nbetterposter at EGU 2023\n\n\n\n\n\n\n\nr-spatial\n\n\ndataviz\n\n\nscicomm\n\n\nrstats\n\n\n\n\nUsing posterdown to build better posters.\n\n\n\n\n\n\nApr 26, 2023\n\n\nLorena Abad\n\n\n\n\n\n\n  \n\n\n\n\n30DayMapChallenge & #RStats\n\n\n\n\n\n\n\nr-spatial\n\n\ndataviz\n\n\nrstats\n\n\n\n\nDay 30: Metamapping day\n\n\n\n\n\n\nNov 30, 2021\n\n\nLorena Abad\n\n\n\n\n\n\n  \n\n\n\n\nFOSS4G: R-Spatial Panel\n\n\n\n\n\n\n\nr-spatial\n\n\ndataviz\n\n\n\n\nI was invited to an R-Spatial Panel!\n\n\n\n\n\n\nNov 18, 2021\n\n\nLorena Abad\n\n\n\n\n\n\n  \n\n\n\n\nGeospatial Network Visualization\n\n\n\n\n\n\n\nr-spatial\n\n\ndataviz\n\n\nnetworks\n\n\n\n\n{sfnetworks} meets {ggraph}\n\n\n\n\n\n\nMar 5, 2021\n\n\nLorena Abad\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2021-03-05-geospatial-network-visualization/index.html",
    "href": "posts/2021-03-05-geospatial-network-visualization/index.html",
    "title": "Geospatial Network Visualization",
    "section": "",
    "text": "This is the first entry for my brand new website built with distill. I hope you find this and hopefully the coming posts useful! So let’s get to it!"
  },
  {
    "objectID": "posts/2021-03-05-geospatial-network-visualization/index.html#layout_sf",
    "href": "posts/2021-03-05-geospatial-network-visualization/index.html#layout_sf",
    "title": "Geospatial Network Visualization",
    "section": "1. layout_sf()",
    "text": "1. layout_sf()\nAs mentioned before, a layout is basically the physical representation of where to place our nodes. When we are dealing with non-spatial network representations we must remember that the nodes are not meant to represent actual locations on Earth, but can be placed anywhere. ggraph provides several algorithms to make this happen. Let’s take one of the examples in the ggraph layout vignette to illustrate. This will include the layout + nodes + edges in a non-geographical representation.\n\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(tidyverse)\nggraph(\n  filter(net, group_components() == 1), \n  layout = 'focus', \n  focus = node_is_center()\n) + \n  ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), data.frame(r = 1:5), colour = 'grey') + \n  geom_edge_link() + \n  geom_node_point() + \n  coord_fixed()\n\n\n\n\nBut when talking about geospatial networks, we would usually want to place the nodes in their geographical location. A really nice thing about ggraph, is that you can give your own customized layout, by passing custom X and Y coordinates for node placement!\nIn sfnetworks, we have a spatial network consisting of nodes and edges. Since we have a nice integration with sf, we can extract the coordinates of our nodes as an X and Y coordinate dataframe, which we can pass to ggraph. Let me give you a quick demo instead of all these words.\n\nnet\n# A sfnetwork with 701 nodes and 851 edges\n#\n# CRS:  EPSG:4326 \n#\n# An undirected multigraph with 14 components with spatially explicit edges\n#\n# A tibble: 701 × 1\n             geometry\n          &lt;POINT [°]&gt;\n1 (7.533722 51.95556)\n2 (7.533461 51.95576)\n3 (7.532442 51.95422)\n4  (7.53209 51.95328)\n5 (7.532709 51.95209)\n6 (7.532869 51.95257)\n# ℹ 695 more rows\n#\n# A tibble: 851 × 5\n   from    to name                  type                                geometry\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;                 &lt;fct&gt;                       &lt;LINESTRING [°]&gt;\n1     1     2 Havixbecker Strasse   residential (7.533722 51.95556, 7.533461 51…\n2     3     4 Pienersallee          secondary   (7.532442 51.95422, 7.53236 51.…\n3     5     6 Schulte-Bernd-Strasse residential (7.532709 51.95209, 7.532823 51…\n# ℹ 848 more rows\n\nnet %&gt;% st_coordinates() %&gt;% head()\n\n            X        Y\n[1,] 7.533722 51.95556\n[2,] 7.533461 51.95576\n[3,] 7.532442 51.95422\n[4,] 7.532090 51.95328\n[5,] 7.532709 51.95209\n[6,] 7.532869 51.95257\n\n\nNow, how do we create a layout that extracts the coordinates automatically? Well here is a little helper function that will take care of that for you. It will extract the X and Y coordinates of any sfnetwork object into a data.frame that is understood by ggraph().\n\nlayout_sf = function(graph){\n  # Extract X and Y coordinates from the nodes\n  graph = activate(graph, \"nodes\")\n  x = sf::st_coordinates(graph)[,\"X\"]\n  y = sf::st_coordinates(graph)[,\"Y\"]\n  data.frame(x, y)\n}\n\nHow do we use it? Well, like this:\n\nlibrary(ggraph)\nggraph(net, layout = layout_sf)\n\n\n\n\nYes! That’s it. You are probably looking now at a beautiful blank canvas, but internally ggraph() has already a plan for every node you will map next, let’s see it in action in the next step."
  },
  {
    "objectID": "posts/2021-03-05-geospatial-network-visualization/index.html#geom_node_",
    "href": "posts/2021-03-05-geospatial-network-visualization/index.html#geom_node_",
    "title": "Geospatial Network Visualization",
    "section": "2. geom_node_*()",
    "text": "2. geom_node_*()\nThe most obvious way to represent a node in space is with a point. This is how we would do it if we were plotting POINT geometries in space. With ggraph we can get that representation with geom_node_point(). Note that other useful node representations in space might be using a label or text. We can achieve that with geom_node_label() and geom_node_text(), respectively.\nBuilding on our previous plot:\n\nggraph(net, layout = layout_sf) +\n  geom_node_point()\n\n\n\n\nOh yes, there are our nodes! But wait… If you are familiar with the sfnetworks vignettes, you might be thinking: this looks distorted… and yes, it does.\nUnfortunately, ggraph() does not know about coordinate reference systems (CRS) so it will accommodate your X and Y axes to the size of your plot. This is one of the reasons why some internal tweaks are needed in ggraph to make this work better. But for now a way to go around this is to use coord_sf():\n\nggraph(net, layout = layout_sf) +\n  geom_node_point() +\n  coord_sf(crs = st_crs(net))\n\n\n\n\nMuch better. Now, our plot also takes into consideration the CRS and places our nodes properly.\nNow let’s give some aesthetics to our plot. If you scroll back up, you will see that our nodes don’t have attributes, other than their geometry, so what should we look at? What about the degree centrality of the node? This will calculate the number of incident edges for each of our nodes. We can do this with the centrality_degree() function in tidygraph.\nA really nice feature about ggraph is that we don’t need to go back to our original graph, mutate our network, save as a new object, and then call it again inside ggraph(). We can just call the function directly inside the aes(), where the calculation will be done on the fly! Read more about it here.\n\nlibrary(tidygraph)\nggraph(net, layout = layout_sf) +\n  geom_node_point(aes(color = centrality_degree())) +\n  coord_sf(crs = st_crs(net))\n\n\n\n\nDirectly passing functions also works inside facet_*() functions. sfnetworks has a couple of functions that can be evaluated in this way. To illustrate we can use node_X(), which gives us the X coordinate of the nodes.\n\nggraph(net, layout = layout_sf) +\n  geom_node_point(aes(color = centrality_degree())) +\n  coord_sf(crs = st_crs(net)) +\n  facet_nodes(~node_X() &gt; 7.535)\n\n\n\n\nOK, probably not a real-world case scenario, but it gives an overview of what can be done!\nLet’s move on to the final step, and connect these nodes to each other."
  },
  {
    "objectID": "posts/2021-03-05-geospatial-network-visualization/index.html#geom_edge_",
    "href": "posts/2021-03-05-geospatial-network-visualization/index.html#geom_edge_",
    "title": "Geospatial Network Visualization",
    "section": "3. geom_edge_*()",
    "text": "3. geom_edge_*()\nNow comes the tricky part. When we are working with graph structures in, let’s call it, “abstract” space, the connections between the nodes are basically straight lines between each from and to pair. Although ggraph has quite a long list to represent edges (see here), the connections that I find most relevant for spatial networks are geom_edge_link() and geom_edge_arc(), which create a straight line or an arc between connected nodes.\n\nggraph(net, layout_sf) +\n  geom_edge_arc() +\n  geom_node_point() +\n  coord_sf(crs = st_crs(net))\n\n\n\n\nYes, I bet you are thinking this could go to accidental aRt. But depending on the visualization you are creating, this geom can come in handy for some data cases, you can see it in action at the end of this post!\nBut now let’s look at straight lines or links between our nodes. We can of course pass aesthetics to all the geom_edge_*() functions, which refer to edge attributes. Let’s color our edges by the type of road:\n\nggraph(net, layout_sf) +\n  geom_edge_link(aes(color = type)) +\n  geom_node_point(size = 0.75) +\n  coord_sf(crs = st_crs(net))\n\n\n\n\nI know that for now you must be wondering: if we have a spatial set of edges with an explicit geometry, why are we just drawing plain lines? Well, remember I said this would be tricky? This is exactly what is missing from ggraph and the core of what I eventually want to implement.\nBut, do not despair! I am here to show you some workarounds, not fully ideal but something to work with in the meantime. Let’s remember that ggraph subclasses a ggplot object, so we can combine ggplot2 functions, and any other package that extends the grammar of graphics.\nWe will resort to geom_sf() for now. We can plot the edges of our network, by extracting them as an sf object with the function st_as_sf(). We have implemented a shortcut that allows you to choose which element of the network (nodes or edges), you want to activate and extract.\n\nggraph(net, layout = layout_sf) +\n  geom_sf(data = st_as_sf(net, \"edges\")) +\n  geom_node_point() +\n  coord_sf(crs = st_crs(net))\n\n\n\n\nAnd there we go, a nice representation of a geospatial network! We can of course pass some aesthetics as well, for example an spatial edge predicate implemented in sfnetworks: edge_circuity(). You will see now that we can pass these predicates directly to the aesthetics inside geom_sf() and since our main object is a ggraph this expression will be evaluated in the network, pretty exciting!!\n\nggraph(net, layout = layout_sf) +\n  geom_sf(\n    data = st_as_sf(net, \"edges\"), size = 0.8,\n    aes(color = as.numeric(edge_circuity()))\n  ) +\n  scale_color_viridis(\"Circuity\") +\n  coord_sf(crs = st_crs(net))\n\n\n\n\nAnd there you have it, a swift overview of how to use ggraph and sfnetworks together."
  },
  {
    "objectID": "posts/2021-11-18-foss4grspatial/index.html",
    "href": "posts/2021-11-18-foss4grspatial/index.html",
    "title": "FOSS4G: R-Spatial Panel",
    "section": "",
    "text": "FOSS4G-2021\nI attended my first FOSS4G conference this year and I really loved it! The team in Buenos Aires excelled at organizing this conference, even if we could not really go to Argentina, the online mode turned out to be an amazing experience.\nI was very happy to be able to be part of this conference not only as an attendee, but also as a panelist for the R-Spatial session. To be honest I felt quite overwhelmed initially when the invitation was extended. Being a panelist with all those big names in R-Spatial was an honor and also scary! Nevertheless, I said yes and do not regret it one single bit!\n\n\nMy presentation\nEach of the panelist had around 10 minutes for a short presentation. I decided to talk about “Reproducible spatial data visualization with R”, where I showed how with 3 simple steps and a great pool of packages to choose from you can create nice spatial dataviz in R. See a glimpse below:\n\n&lt;p&gt;\nYour browser does not support iframes.\n&lt;/p&gt;\n\nFull link to slides here.\n\n\nThe panel discussion\nDuring the panel, we discussed the role of R-Spatial as a new member of the OSGEO community. It was a very lively discussion, with most questions coming from the audience. Overall a great experience!\nHere is the video of the session:\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{abad2021,\n  author = {Abad, Lorena},\n  title = {FOSS4G: {R-Spatial} {Panel}},\n  date = {2021-11-18},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAbad, Lorena. 2021. “FOSS4G: R-Spatial Panel.” November 18,\n2021."
  },
  {
    "objectID": "posts/2021-11-30-30daymapchallenge-rstats/index.html",
    "href": "posts/2021-11-30-30daymapchallenge-rstats/index.html",
    "title": "#30DayMapChallenge & #RStats",
    "section": "",
    "text": "Since 2019, the #30DayMapChallenge by Topi Tjukanov has brought map geeks together for a month to flood our Twitter feeds with mind-blowing maps.\nThis year, I decided to participate by making maps with R! I had a lot of fun, but it was also quite a journey. I chose as an overarching topic my home country: Ecuador. I posted each of the maps on Twitter, and these two are the ones that received most attention:\n\n\n\n#30DayMapChallenge Day 10: RasterI am usually asked how hot my country is, and I usually say, not as hot as you may think! Worldclim data is a wonderful source for #dataviz#RStats #rspatial pic.twitter.com/Fgurk6du09\n\n— Lorena Abad (@loreabad6) November 11, 2021\n\n\n\n\n#30DayMapChallenge Day 24: HistoricalHumboldt's travels through the AmericasI have been fascinated with this scientist and since I read The Invention of Nature by @andrea_wulf I wanted to learn more and more!#RStats #RSpatial pic.twitter.com/J5yPUqZtFY\n\n— Lorena Abad (@loreabad6) November 24, 2021\n\n\n\nMy personal favorite, however, is day 13. I live away from home and so many other Ecuadorians do. It was amazing to see where we all are, and how “far-away” time wise each of us is from calling our loved ones.\n\n\n\n#30DayMapChallenge Day 13: NaturalEarth data challengeWhat is a good time to call home? Timezones are a hard thing to get used to when away from home. Here is a helpful map for all those Ecuadorians living abroad. #RStats #RSpatial pic.twitter.com/i54824zsrx\n\n— Lorena Abad (@loreabad6) November 15, 2021\n\n\n\nYou can see my complete gallery on this GitHub repository. This post is meant to show the back-end of these maps, so here we go!"
  },
  {
    "objectID": "posts/2021-11-30-30daymapchallenge-rstats/index.html#most-used-r-packages",
    "href": "posts/2021-11-30-30daymapchallenge-rstats/index.html#most-used-r-packages",
    "title": "#30DayMapChallenge & #RStats",
    "section": "Most used R packages",
    "text": "Most used R packages\n\nsf\n\n\n\n\n\n\n\nTake a look again at the plot above, which package stands out the most? Beautiful sf! Simple features came here to stay and I am very glad it exists. Working with spatial data in R has never been easier, and that is because of this awesome package. I used it to read spatial data into R, to work with projections and to perform spatial analyses like joins, generating random spatial points, etc.\n\n\ndplyr\n\n\n\n\n\n\n\nThe tidyverse has made working with data in R extremely intuitive. Being able to work with structured data frames brings data science to a new level. dplyr is the first tidyverse package I learnt and I use it constantly for tasks as filtering, selecting, mutating, etc.\n\n\nggplot2\n\n\n\n\n\n\n\nAnother package of the tidyverse is ggplot2, which introduces the grammar of graphics into R and is extremely powerful to create awesome visualizations. Two main functions allow you to combine this package with spatial data: geom_sf() and geom_stars(). One interesting tip, if you learn to use coord_sf(), you can do things like assigning a CRS to your plot, although your data has a different projection, as coord_sf(crs =\"+proj=geos\")\nThis are the ggplot extensions I use the most:\n\n\n\n\n\n\n  \n  \n    ggfx\n\nTo give shading and glow effects to spatial features\n\n    ggtext\n\nTo add special formatting to text\n\n    gganimate\n\nTo animate the plots\n\n    ggspatial\n\nTo add north arrows and spatial scales\n\n    ggnewscale\n\nTo map multiple variables to the fill/color aesthetics\n\n    ggimage\n\nTo add images in spatial locations or as annotations\n\n    ggrepel\n\nTo automatically place overlapping labels\n\n  \n  \n  \n\n\n\n\n\n\nosmdata\n\n\n\n\n\n\n\nThis package is simply the easiest way I have come across in R to query OpenStreetMap data. I use it very often when I need to get data for small areas. For larger areas, for example a whole country, I use osmextract.\n\n\ntmap\n\n\n\n\n\n\n\nWant to plot spatial features fast and easy, static and interactive? Use tmap! I use this package a lot for my scientific publications because it allows you to use raster RGB images and vector data really easy. To get a bit more creative it has some limitations, and that is why I did not use it as often as ggplot2 on this challenge. But, one of the main features I like about this one is the ability to call tm_facets() and get individual plots of features grouped by a category, and let scales x and y be free. This is not possible with ggplot2. See that in action on Day 22: Boundaries.\nNote: This hex logo is not official yet but I love it! Waiting eagerly for version 4 of tmap to launch this nice logo and many new features!\n\n\nscico\n\n\n\n\n\n\n\nFabio Crameri provided the whole scientific community a great set of scientific color palettes to fairly represent data that is universaly readable! scico allows you to use the palettes in R. Another great source of palettes is viridis, which is already easily accessible in ggplot2 with scale_*_viridis_*().\n\n\nstars\n\n\nstars really needs a hex logo 🙏\nSpatiotemporal Arrays, Raster and Vector Data Cubes are handled neatly with stars. For anything raster or netcdf related this is my go-to package. It might be a bit complex to start with this package, but it is definitely worth it.\nOther options to work with raster data are raster and terra form the rspatial universe, which I actually use when I need to create hillshades from elevation data."
  },
  {
    "objectID": "posts/2021-11-30-30daymapchallenge-rstats/index.html#honorable-mentions",
    "href": "posts/2021-11-30-30daymapchallenge-rstats/index.html#honorable-mentions",
    "title": "#30DayMapChallenge & #RStats",
    "section": "Honorable mentions",
    "text": "Honorable mentions\nAlthough not on the top 7 above, there are some packages that I use frequently, but were not so used for this challenge. There are also really cool packages that I only discovered in the past month. Here is a table of how I used them:\n\n\n\n\n\n\n  \n    \n    \n    \n  \n  \n  \n    sfnetworks\n\nOK, I am biased here, but have you checked out sfnetworks yet? Well, if you work with spatial networks you should. I used it to compute travel time using public transport in Quito for Day 9: Monochrome\n\n\n    rgee\n\nDo you work with Google Earth Engine? Do you want to do that via R? Then use rgee. I use it to extract RGB thumbnails of Sentinel-2 imagery. See the RGB collection for Day 6, Day 7 and Day 8\n\n\n    rayshader\n\nFor Day 11: 3D I could not use any other package than rayshader. 3D rendering can get so creative with this package\n\n\n    haven\n\nOpen data can come in so many formats and with so many extensions. When I first saw a .dta or a .sav file I thought, OK now what? Luckily, haven was just there ready made for these cases!\n\n\n    ggpomological\n\nFor Day 24: Historical I wanted to make a map with an old-style look. And there it was: ggpomological! I was very happy to run into this package\n\n\n    gggibbous\n\nI had seen moon plots in other dataviz projects before but had never tried them myself. For Day 19: Island(s) I finally got the chance!\n\n\n    biscale\n\nI remember I made some bivariate choropleth maps once and it required a lot of code to achieve. biscale made it easy! I really wanted to flip the legend, and I managed so if you are interested, code is there. Featured on Day 26: Choropleth\n\n\n    leaftime & leaflet\n\nI normally handle my interactive maps with tmap or mapview, but this time I stubbornly wanted a time slider for my Day 25: Interactive map, hence I ended up learning a lot on hot to use leaflet and its addons"
  },
  {
    "objectID": "posts/2023-04-26-betterposter-at-egu-2023/index.html",
    "href": "posts/2023-04-26-betterposter-at-egu-2023/index.html",
    "title": "#betterposter at EGU 2023",
    "section": "",
    "text": "While I am sitting at #EGU23 I am happy to be surrounded by so many scientists who care about the environment and are willing to go beyond their own topics to engage with the public and understand the ways we can work together towards a common goal.\nI am delighted to also find a small but hopefully growing community of software developers and research software engineers around, fully passionate about FAIR principles and open science.\nTwo and a half more days are left and I have learned so much from different topics that I will probably need a couple of weeks to let everything sink in."
  },
  {
    "objectID": "posts/2023-04-26-betterposter-at-egu-2023/index.html#tip-1",
    "href": "posts/2023-04-26-betterposter-at-egu-2023/index.html#tip-1",
    "title": "#betterposter at EGU 2023",
    "section": "Tip #1",
    "text": "Tip #1\n\nAvoid headaches, use Google Fonts.\n\nI had a really cool font installed locally and I wanted to use it for my poster. Result: error during rendering.\nposterdown uses Chrome or Chromium for rendering, and using fonts that are not available on the web can be a hassle.\nIf you still want to use your very cool font, a good option is to look for it at similarfont.io, which can give you some ideas of alternative Google Fonts."
  },
  {
    "objectID": "posts/2023-04-26-betterposter-at-egu-2023/index.html#tip-2",
    "href": "posts/2023-04-26-betterposter-at-egu-2023/index.html#tip-2",
    "title": "#betterposter at EGU 2023",
    "section": "Tip #2",
    "text": "Tip #2\n\nWant to adapt the &lt;style&gt;, go thorugh the HTML templates.\n\nOnce I was on the final steps of my poster development, I wanted to change this little details like padding around titles, font sizes, and so on.\nSome of these could be set on the file YAML, but others not. Also if you change from the posterdown::posterdown_betterport to posterdown::posterdown_betterland, some variables might not be named the same accross those.\nWhat saved me some time was going through the HTML templates on the posterdown repo. For example, find the one for the better landscape template here.\nGoing through the template will reveal to you if what you want to change is a YAML parameter, most likely when the line starts with $if(parameter_name).\nIf it is not a YAML parameter, you can add an HTML chunk to your RMarkdown file that will hopefully override the settings you want (it does not always work or I lack the HTML/CSS knowledge to figure out why!)\nThis are the HTML changes I made to my poster:\n\n&lt;style&gt;\n.outer h1 {\n text-align: center;\n margin-top: 0.6in;\n margin-bottom: -0.4in;\n}\ncaption {\n margin-top: 0px;\n margin-bottom: 2px;\n padding-top: 0in;\n padding-bottom: 0in;\n font-size: 23pt;\n}\n.caption {\n margin-top: -2px;\n margin-bottom: 2px;\n padding-top: 0in;\n padding-bottom: 0in;\n font-size: 23pt;\n}\n.main p {\n padding-top: 0%;\n text-align: center;\n}\n.main_pic {\n margin-top: -1in;\n display: inline-block;\n text-align: center;\n}\n&lt;/style&gt;"
  },
  {
    "objectID": "posts/2023-04-26-betterposter-at-egu-2023/index.html#tip-3",
    "href": "posts/2023-04-26-betterposter-at-egu-2023/index.html#tip-3",
    "title": "#betterposter at EGU 2023",
    "section": "Tip #3",
    "text": "Tip #3\n\nUsing tmap to show results? Take some shortcuts when designing\n\ntmap by Martijn Tennekes (@MartijnTennekes) is an excellent package to generate beautiful maps, especially if you want to combine raster and vector data.\nBut, designing your figure might be hard when you want to add legends, or distinct elements and you suddenly have white space all around.\nThis can become specially frustrating when the space in your poster is not infinite. Version 4 for tmap is soon coming, but in the meantime I still use the CRAN version to build my plots. I find tmap::tm_add_legend() and tmap::tmap_arrange() excellent functions to work around design issues, and one shortcut I usually take is to build my legend separate from the map, so that I can work with the space in an easier way.\nBut, problem incoming! When I tried to print two different figures in RMarkdown, i.e. the actual plot and the legend in a single code chunk, the figure width and height was used for both figures, without options to provide different heights.\nResult? I had a very big white space below my legend.\nSolution? Use two code chunks! This will allow you to give different dimensions to each output. If you need to add a figure caption, do it on the second plot, and to avoid an empty line between two figures, place your code chunks completely together, with no line break:\n\n```{r}\n#| label: figure\n#| fig-width: 10\n#| fig-height: 10\n#| crop: true\nlibrary(tmap)\ntm1 = tm_shape(data) +\n  tm_polygons() \ntm2 = tm_shape(data) +\n  tm_polygons() \ntmap_arrange(tm1, tm2)\n#| label: legend\n#| fig-width: 10\n#| fig-height: 1\n#| fig-cap: \"Your figure caption.\"\n#| crop: true\ntm_shape(data) +\n  tm_polygons(legend.show = FALSE) +\n  tm_add_legend()\n```"
  },
  {
    "objectID": "posts/wip/2023-09-26-stac-across-languages/index.html",
    "href": "posts/wip/2023-09-26-stac-across-languages/index.html",
    "title": "STAC across Languages",
    "section": "",
    "text": "Some background\nOver a month ago I was invited as a lecturer at the OpenGeoHub 2023 Summer School in Poznan, Poland. It was a great experience, meeting brilliant people, learning from other lecturers and enjoying the city.\nMy lecture was on Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python. Following on the lecture and inspired by the geocompx blogpost on geographic data analysis in R and Python, I started the quest to do a similar post with the basic content of my lecture.\nWhy do I call it a quest? Well, it took me a while. Before this post, my website was based on distill, so the migration process from a distill-based website to a quarto-based one was the first task. Why did I have to do the migration? Because Quarto allows the combination of two or more programming languages in a single file, crucial for data science across languages.\n\n\nI managed to migrate thanks to the Quarto documentation and to posts from Danielle Navarro (Navarro 2022). Big thanks!\nBut in any case, I can now inaugurate my new website with a post on how to query STAC data and create on-demand data cubes with R and Python! So let’s get to it.\n\n\nLibraries\nLet’s first load the libraries needed. Here you can get familiar with the tab setting of this post. Clicking on the R or Python tab will switch between languages. Clicking on either tab will switch the panel in the whole document.\n\nPythonR\n\n\n\nimport dask.array as da # handle dask arrays\nimport geopandas as gpd # handle geospatial data frames\nfrom IPython.display import Image # visualize URLs\nimport pystac_client # connecting to the STAC API\nfrom rasterio.enums import Resampling # perform re-sampling operations\nimport shapely # create vector objects\nimport stackstac # build an on-demand STAC data cube\n\n\n\n\nlibrary(dplyr) # data wrangling\nlibrary(gdalcubes) # on-demand data cubes\nlibrary(knitr) # visualize URLs\nlibrary(rstac) # connecting to the STAC API\nlibrary(sf) # handle geospatial data frames\n\n\n\n\n\n\nQuerying STAC data\nSTAC stands for SpatioTemporal Asset Catalog and it is “a common language to describe geospatial information, so it can more easily be worked with, indexed, and discovered”.\nThere are several APIs available to query data, you can browse them all in the STAC catalog index. Some of these APIs will require authentication to access the data. We will use the Earth Search catalog for this post, which allows querying data on Amazon Web Services (AWS). The data we will fetch (Sentinel-2) does not require authentication.\nIn Python we can use the pystac-client library (Duckworth 2021), while in R we can use the rstac library (Simoes et al. 2021). Refer to their documentation pages for more information.\nTo start fetching data, we will open a client. We can then see the collections available for this API. In Python we call a for loop on the client collections, while in R we use the get_request() function. Both methods make an HTTP GET request to STAC web services.\n\nPythonR\n\n\n\napi_url = 'https://earth-search.aws.element84.com/v1'\nclient = pystac_client.Client.open(api_url)\nfor collection in client.get_collections():\n    print(collection)\n\n&lt;CollectionClient id=cop-dem-glo-30&gt;\n&lt;CollectionClient id=naip&gt;\n&lt;CollectionClient id=sentinel-2-l2a&gt;\n&lt;CollectionClient id=sentinel-2-l1c&gt;\n&lt;CollectionClient id=landsat-c2-l2&gt;\n&lt;CollectionClient id=cop-dem-glo-90&gt;\n&lt;CollectionClient id=sentinel-1-grd&gt;\n\n\n\n\n\napi_url = \"https://earth-search.aws.element84.com/v1\"\nclient = stac(api_url)\ncollections(client) |&gt; get_request()\n\n###STACCollectionList\n- collections (7 item(s)):\n  - cop-dem-glo-30\n  - naip\n  - sentinel-2-l2a\n  - sentinel-2-l1c\n  - landsat-c2-l2\n  - cop-dem-glo-90\n  - sentinel-1-grd\n- field(s): collections, links, context\n\n\n\n\n\nWe will choose here Sentinel-1 Level 2a data, which provides atmospherically corrected data representing surface reflectance.\nWe can also set the coordinates for our query, in this case a POINT geometry, which will help to retrieve scenes that intersect with it. At last we can also set a time extent, where we define the start and end of our query.\n\nPythonR\n\n\n\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = shapely.Point(lon, lat)\n# date range\ntime_extent = '2022-05-01/2022-10-01'\n\n\n\n\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = st_point(c(lon, lat))\n# date range\ntime_extent = c(\"2022-05-01\", \"2022-10-01\")\n\n\n\n\nNow, we can pass the arguments to our search. Note for the R search we had to slightly format the datetime parameter. This is because of a bug when fetching the data from STAC.\nYou will see we can also query based on scene metadata. In this example we look for scenes with cloud cover lower than 10% for the whole scene. In Python we do the filtering within the search, while in R we perform it after the HTTP POST request.\nFinally, we check how many items we fetched with our query, also to compare that R and Python give us the same results.\n\nPythonR\n\n\n\nsearch = client.search(\n    collections=[collection],\n    intersects=point,\n    datetime=time_extent,\n    query=[\"eo:cloud_cover&lt;10\"],\n)\nitems = search.item_collection()\nlen(items)\n\n8\n\n\n\n\n\nitems = client  |&gt; \n  stac_search(\n      collections = collection,\n      intersects = point, \n      datetime = paste0(time_extent,\"T00:00:00Z\", collapse = \"/\"),\n      limit = 100\n    ) |&gt; \n  post_request() |&gt; \n  items_filter(\n    filter_fn = function(x) {x$properties$`eo:cloud_cover` &lt; 10}\n  )\nitems_length(items)\n\n[1] 8\n\n\n\n\n\nTo explore the items as data frames we can either convert to a geopandas table in Python or to an sf table in R. We added an extra fid column to allow index matching to the original item list.\n\nPythonR\n\n\n\nitems_df = gpd.GeoDataFrame.from_features(items.to_dict(), crs=\"epsg:4326\")\nitems_df\n\n                                            geometry  ...                   updated\n0  POLYGON ((16.49848 53.24020, 17.39166 53.22562...  ...  2022-11-06T13:14:57.270Z\n1  POLYGON ((16.49848 53.24020, 17.39346 53.22558...  ...  2022-11-06T12:53:48.090Z\n2  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:12:58.202Z\n3  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:14:37.621Z\n4  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T12:54:05.312Z\n5  POLYGON ((16.49848 53.24020, 17.39346 53.22558...  ...  2022-11-06T12:55:07.931Z\n6  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T12:52:50.337Z\n7  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:16:38.195Z\n\n[8 rows x 42 columns]\n\n\n\n\n\n# we add an extra column to be able to subset the original item list\nitems_df = items_as_sf(items) |&gt; \n  mutate(fid = row_number())\n# wrap function around st_as_sf and as_tibble just for nicer printing\nst_as_sf(as_tibble(items_df))\n\nSimple feature collection with 8 features and 42 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 16.465 ymin: 52.22258 xmax: 18.14175 ymax: 53.2402\nGeodetic CRS:  WGS 84\n# A tibble: 8 × 43\n  `s2:generation_time`        s2:medium_proba_clouds_percenta…¹ `s2:product_uri`\n  &lt;chr&gt;                                                   &lt;dbl&gt; &lt;chr&gt;           \n1 2022-08-26T16:20:59.000000Z                           0.00172 S2A_MSIL2A_2022…\n2 2022-08-16T16:25:57.000000Z                           2.27    S2A_MSIL2A_2022…\n3 2022-08-03T13:51:55.000000Z                           5.69    S2A_MSIL2A_2022…\n4 2022-07-19T11:39:43.000000Z                           0.00007 S2B_MSIL2A_2022…\n5 2022-07-14T17:50:57.000000Z                           1.29    S2A_MSIL2A_2022…\n6 2022-06-27T16:28:10.000000Z                           0.732   S2A_MSIL2A_2022…\n7 2022-06-24T14:39:14.000000Z                           0.00130 S2A_MSIL2A_2022…\n8 2022-06-19T11:43:29.000000Z                           0.0514  S2B_MSIL2A_2022…\n# ℹ abbreviated name: ¹​`s2:medium_proba_clouds_percentage`\n# ℹ 40 more variables: `s2:processing_baseline` &lt;chr&gt;, `grid:code` &lt;chr&gt;,\n#   `s2:product_type` &lt;chr&gt;, `s2:snow_ice_percentage` &lt;dbl&gt;,\n#   `s2:vegetation_percentage` &lt;dbl&gt;, `processing:software` &lt;chr&gt;,\n#   `s2:high_proba_clouds_percentage` &lt;dbl&gt;,\n#   `s2:unclassified_percentage` &lt;dbl&gt;, `s2:water_percentage` &lt;dbl&gt;,\n#   `s2:not_vegetated_percentage` &lt;dbl&gt;, `s2:cloud_shadow_percentage` &lt;dbl&gt;, …\n\n\n\n\n\nWhen we have the items as data frame, we can further filter the data based on the table columns. Below, we filter for data with a cloud cover lower than 2% and with a no-data pixel percentage below 10%.\nTo illustrate how to fetch item properties, we can select the first item in our list and get the datetime of this scene.\n\nPythonR\n\n\n\nids = items_df.loc[\n  (items_df['eo:cloud_cover'] &lt;= 2) &\n  (items_df['s2:nodata_pixel_percentage'] &lt;= 10)\n]\nitem = items[ids.index[0]]\nitem.datetime\n\ndatetime.datetime(2022, 7, 19, 10, 6, 8, 645000, tzinfo=tzutc())\n\n\n\n\n\nids = items_df |&gt; \n  filter(\n    `eo:cloud_cover` &lt;= 2, `s2:nodata_pixel_percentage` &lt;= 10\n  ) |&gt; \n  pull(fid)\nitem = items$features[[ids[1]]]\nitem$properties$datetime\n\n[1] \"2022-07-19T10:06:08.645000Z\"\n\n\n\n\n\nWe can also take a look at the selected scene by fetching the item thumbnail. Here you will see that both R and Python return the same scene, as they should! 😉.\n\nPythonR\n\n\n\nthumbnail = item.assets[\"thumbnail\"].href\nImage(url = thumbnail)\n\n\n\n\n\n\n\nitem |&gt; \n  assets_url(asset_names = \"thumbnail\") |&gt; \n  include_graphics()\n\n\n\n\n\n\n\n\n\nCreating a STAC data cube\nFetching individual scenes is interesting, but the real power of working with the STAC API is the possibility to work with big EO data without the need to download a single pixel to your own computer!\nFor this, we can create an on-demand data cube that can help us organize and analyze our data, doing the data wrangling needed and only fetching the data we need as a final step.\nTo create on-demand data cubes, we will use R’s gdalcubes (Appel, Pebesma, and Mohr 2021) and Python’s stackstac (Joseph 2023).\nWe will create our data cube on a smaller subset. Here we load a GeoJSON file of Poznan, where the summer school took place. We read it in and extract its bounding box.\n\nPythonR\n\n\n\npoznan = \"https://raw.githubusercontent.com/loreabad6/ogh23/main/data/poznan.geojson\"\nfootprint = gpd.read_file(poznan)\nbbox = footprint.total_bounds\n\n\n\n\npoznan = \"https://raw.githubusercontent.com/loreabad6/ogh23/main/data/poznan.geojson\"\nfootprint = read_sf(poznan)\nbbox = footprint |&gt; st_transform(crs = 32633) |&gt; st_bbox()\n\n\n\n\nNow we can create our cube. The following code chunk has several steps depending if you are in the R or Python tab. I kept it as a single block since this is how we get an on-demand data cube on each end. In essence what we do is:\n\nDefine the assets we want.\n\nI selected RGB+NIR bands to illustrate this process, but of course we can set any other band. I included the [SCL band] (https://sentinels.copernicus.eu/web/sentinel/technical-guides/sentinel-2-msi/level-2a/algorithm-overview) which we will use to mask clouds.\n\nSet-up the cube.\n\n\nIn Python we do this with the stackstac.stack function, where we can set the resolution, assets, bounding box, and re-sampling method for the data. Separately we define a cloud mask to get remove invalid pixels.\nIn R, this works in a lengthier way, using more intermediate functions. We first define the collection with the assets with the stac_image_collection function. Then, we define an extent in the form of a list. This extent will have the start and end date as well as the bounding box of our cube. Now we can define a view, which defines the CRS, spatial and temporal resolution, and the aggregation and re-sampling method. We finally define the cloud mask with image_mask and can then build a raster_cube.\n\n\nPythonR\n\n\n\nassets = [\"red\",\"green\",\"blue\",\"nir\",\"scl\"]\ncube_all = stackstac.stack(\n    items,\n    assets=assets,\n    resolution=200,\n    bounds_latlon=bbox,\n    resampling=Resampling.bilinear\n)\nscl = cube_all.sel(band=[\"scl\"])\ns2_mask = da.isin(scl, [3,8,9])\ncube = cube_all.where(~s2_mask)\ncube\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'stackstac-6f6f95659c42553e86fb8cd5bbf0143c' (time: 8,\n                                                                band: 5,\n                                                                y: 140, x: 143)&gt;\ndask.array&lt;where, shape=(8, 5, 140, 143), dtype=float64, chunksize=(1, 1, 140, 143), chunktype=numpy.ndarray&gt;\nCoordinates: (12/52)\n  * time                                     (time) datetime64[ns] 2022-06-19...\n    id                                       (time) &lt;U24 'S2B_33UXU_20220619_...\n  * band                                     (band) &lt;U5 'red' 'green' ... 'scl'\n  * x                                        (x) float64 6.19e+05 ... 6.474e+05\n  * y                                        (y) float64 5.823e+06 ... 5.795e+06\n    s2:datastrip_id                          (time) &lt;U64 'S2B_OPER_MSI_L2A_DS...\n    ...                                       ...\n    gsd                                      (band) object 10 10 10 10 None\n    raster:bands                             (band) object {'nodata': 0, 'dat...\n    common_name                              (band) object 'red' ... None\n    center_wavelength                        (band) object 0.665 0.56 ... None\n    full_width_half_max                      (band) object 0.038 0.045 ... None\n    epsg                                     int32 32633\nAttributes:\n    spec:        RasterSpec(epsg=32633, bounds=(619000, 5795000, 647600, 5823...\n    crs:         epsg:32633\n    transform:   | 200.00, 0.00, 619000.00|\\n| 0.00,-200.00, 5823000.00|\\n| 0...\n    resolution:  200xarray.DataArray'stackstac-6f6f95659c42553e86fb8cd5bbf0143c'time: 8band: 5y: 140x: 143dask.array&lt;chunksize=(1, 1, 140, 143), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n6.11 MiB\n156.41 kiB\n\n\nShape\n(8, 5, 140, 143)\n(1, 1, 140, 143)\n\n\nDask graph\n40 chunks in 10 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (52)time(time)datetime64[ns]2022-06-19T10:06:08.087000 ... 2...array(['2022-06-19T10:06:08.087000000', '2022-06-24T10:06:16.177000000',\n       '2022-06-27T10:16:12.822000000', '2022-07-14T10:06:16.331000000',\n       '2022-07-19T10:06:08.645000000', '2022-08-03T10:06:14.409000000',\n       '2022-08-16T10:16:12.609000000', '2022-08-26T10:16:12.680000000'],\n      dtype='datetime64[ns]')id(time)&lt;U24'S2B_33UXU_20220619_0_L2A' ... '...array(['S2B_33UXU_20220619_0_L2A', 'S2A_33UXU_20220624_0_L2A',\n       'S2A_33UXU_20220627_0_L2A', 'S2A_33UXU_20220714_0_L2A',\n       'S2B_33UXU_20220719_0_L2A', 'S2A_33UXU_20220803_0_L2A',\n       'S2A_33UXU_20220816_0_L2A', 'S2A_33UXU_20220826_0_L2A'],\n      dtype='&lt;U24')band(band)&lt;U5'red' 'green' 'blue' 'nir' 'scl'array(['red', 'green', 'blue', 'nir', 'scl'], dtype='&lt;U5')x(x)float646.19e+05 6.192e+05 ... 6.474e+05array([619000., 619200., 619400., 619600., 619800., 620000., 620200., 620400.,\n       620600., 620800., 621000., 621200., 621400., 621600., 621800., 622000.,\n       622200., 622400., 622600., 622800., 623000., 623200., 623400., 623600.,\n       623800., 624000., 624200., 624400., 624600., 624800., 625000., 625200.,\n       625400., 625600., 625800., 626000., 626200., 626400., 626600., 626800.,\n       627000., 627200., 627400., 627600., 627800., 628000., 628200., 628400.,\n       628600., 628800., 629000., 629200., 629400., 629600., 629800., 630000.,\n       630200., 630400., 630600., 630800., 631000., 631200., 631400., 631600.,\n       631800., 632000., 632200., 632400., 632600., 632800., 633000., 633200.,\n       633400., 633600., 633800., 634000., 634200., 634400., 634600., 634800.,\n       635000., 635200., 635400., 635600., 635800., 636000., 636200., 636400.,\n       636600., 636800., 637000., 637200., 637400., 637600., 637800., 638000.,\n       638200., 638400., 638600., 638800., 639000., 639200., 639400., 639600.,\n       639800., 640000., 640200., 640400., 640600., 640800., 641000., 641200.,\n       641400., 641600., 641800., 642000., 642200., 642400., 642600., 642800.,\n       643000., 643200., 643400., 643600., 643800., 644000., 644200., 644400.,\n       644600., 644800., 645000., 645200., 645400., 645600., 645800., 646000.,\n       646200., 646400., 646600., 646800., 647000., 647200., 647400.])y(y)float645.823e+06 5.823e+06 ... 5.795e+06array([5823000., 5822800., 5822600., 5822400., 5822200., 5822000., 5821800.,\n       5821600., 5821400., 5821200., 5821000., 5820800., 5820600., 5820400.,\n       5820200., 5820000., 5819800., 5819600., 5819400., 5819200., 5819000.,\n       5818800., 5818600., 5818400., 5818200., 5818000., 5817800., 5817600.,\n       5817400., 5817200., 5817000., 5816800., 5816600., 5816400., 5816200.,\n       5816000., 5815800., 5815600., 5815400., 5815200., 5815000., 5814800.,\n       5814600., 5814400., 5814200., 5814000., 5813800., 5813600., 5813400.,\n       5813200., 5813000., 5812800., 5812600., 5812400., 5812200., 5812000.,\n       5811800., 5811600., 5811400., 5811200., 5811000., 5810800., 5810600.,\n       5810400., 5810200., 5810000., 5809800., 5809600., 5809400., 5809200.,\n       5809000., 5808800., 5808600., 5808400., 5808200., 5808000., 5807800.,\n       5807600., 5807400., 5807200., 5807000., 5806800., 5806600., 5806400.,\n       5806200., 5806000., 5805800., 5805600., 5805400., 5805200., 5805000.,\n       5804800., 5804600., 5804400., 5804200., 5804000., 5803800., 5803600.,\n       5803400., 5803200., 5803000., 5802800., 5802600., 5802400., 5802200.,\n       5802000., 5801800., 5801600., 5801400., 5801200., 5801000., 5800800.,\n       5800600., 5800400., 5800200., 5800000., 5799800., 5799600., 5799400.,\n       5799200., 5799000., 5798800., 5798600., 5798400., 5798200., 5798000.,\n       5797800., 5797600., 5797400., 5797200., 5797000., 5796800., 5796600.,\n       5796400., 5796200., 5796000., 5795800., 5795600., 5795400., 5795200.])s2:datastrip_id(time)&lt;U64'S2B_OPER_MSI_L2A_DS_2BPS_202206...array(['S2B_OPER_MSI_L2A_DS_2BPS_20220619T114329_S20220619T100031_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220624T143914_S20220624T100039_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220627T162810_S20220627T100933_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220714T175057_S20220714T100046_N04.00',\n       'S2B_OPER_MSI_L2A_DS_2BPS_20220719T113943_S20220719T095747_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220803T135155_S20220803T100037_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220816T162557_S20220816T100922_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220826T162059_S20220826T100933_N04.00'],\n      dtype='&lt;U64')s2:vegetation_percentage(time)float6480.88 87.55 84.59 ... 55.84 64.06array([80.8779  , 87.545991, 84.593809, 64.089584, 64.467937, 49.599385,\n       55.840641, 64.060515])s2:datatake_type()&lt;U8'INS-NOBS'array('INS-NOBS', dtype='&lt;U8')constellation()&lt;U10'sentinel-2'array('sentinel-2', dtype='&lt;U10')mgrs:latitude_band()&lt;U1'U'array('U', dtype='&lt;U1')created(time)&lt;U24'2022-11-06T13:16:38.195Z' ... '...array(['2022-11-06T13:16:38.195Z', '2022-11-06T12:52:50.337Z',\n       '2022-11-06T12:55:07.931Z', '2022-11-06T12:54:05.312Z',\n       '2022-11-06T13:14:37.621Z', '2022-11-06T13:12:58.202Z',\n       '2022-11-06T12:53:48.090Z', '2022-11-06T13:14:57.270Z'],\n      dtype='&lt;U24')view:sun_azimuth(time)float64158.9 158.5 162.7 ... 165.2 166.8array([158.91324506, 158.50630661, 162.6663807 , 157.84964052,\n       157.99361406, 159.43576449, 165.15376613, 166.81057205])s2:medium_proba_clouds_percentage(time)float640.05143 0.001297 ... 2.271 0.00172array([5.143000e-02, 1.297000e-03, 7.322780e-01, 1.287753e+00,\n       7.000000e-05, 5.689905e+00, 2.270966e+00, 1.720000e-03])instruments()&lt;U3'msi'array('msi', dtype='&lt;U3')s2:processing_baseline()&lt;U5'04.00'array('04.00', dtype='&lt;U5')s2:datatake_id(time)&lt;U34'GS2B_20220619T100029_027604_N04...array(['GS2B_20220619T100029_027604_N04.00',\n       'GS2A_20220624T100041_036584_N04.00',\n       'GS2A_20220627T100611_036627_N04.00',\n       'GS2A_20220714T100041_036870_N04.00',\n       'GS2B_20220719T095559_028033_N04.00',\n       'GS2A_20220803T100041_037156_N04.00',\n       'GS2A_20220816T100611_037342_N04.00',\n       'GS2A_20220826T100611_037485_N04.00'], dtype='&lt;U34')eo:cloud_cover(time)float647.491 0.002495 ... 4.8 0.003331array([7.491449e+00, 2.495000e-03, 1.067175e+00, 1.825375e+00,\n       5.511000e-03, 8.775087e+00, 4.800238e+00, 3.331000e-03])s2:dark_features_percentage(time)float640.002057 0.004107 ... 0.01486array([0.002057, 0.004107, 0.006966, 0.00361 , 0.004429, 0.003646,\n       0.010289, 0.01486 ])s2:sequence()&lt;U1'0'array('0', dtype='&lt;U1')processing:software()object{'sentinel2-to-stac': '0.1.0'}array({'sentinel2-to-stac': '0.1.0'}, dtype=object)mgrs:grid_square()&lt;U2'XU'array('XU', dtype='&lt;U2')s2:reflectance_conversion_factor(time)float640.9691 0.9683 ... 0.9741 0.9779array([0.96912679, 0.96833888, 0.96797547, 0.96750684, 0.96788495,\n       0.97039583, 0.97414715, 0.9779224 ])s2:water_percentage(time)float641.067 1.266 ... 0.7679 0.7824array([1.066825, 1.266303, 0.75182 , 1.253815, 1.263951, 1.116363,\n       0.767899, 0.782386])view:sun_elevation(time)float6459.41 59.34 59.71 ... 50.17 46.97array([59.4067386 , 59.33648111, 59.7142557 , 57.43426893, 56.58894221,\n       53.33325433, 50.17160714, 46.96899755])s2:product_uri(time)&lt;U65'S2B_MSIL2A_20220619T100029_N040...array(['S2B_MSIL2A_20220619T100029_N0400_R122_T33UXU_20220619T114329.SAFE',\n       'S2A_MSIL2A_20220624T100041_N0400_R122_T33UXU_20220624T143914.SAFE',\n       'S2A_MSIL2A_20220627T100611_N0400_R022_T33UXU_20220627T162810.SAFE',\n       'S2A_MSIL2A_20220714T100041_N0400_R122_T33UXU_20220714T175057.SAFE',\n       'S2B_MSIL2A_20220719T095559_N0400_R122_T33UXU_20220719T113943.SAFE',\n       'S2A_MSIL2A_20220803T100041_N0400_R122_T33UXU_20220803T135155.SAFE',\n       'S2A_MSIL2A_20220816T100611_N0400_R022_T33UXU_20220816T162557.SAFE',\n       'S2A_MSIL2A_20220826T100611_N0400_R022_T33UXU_20220826T162059.SAFE'],\n      dtype='&lt;U65')s2:nodata_pixel_percentage(time)object0 0 ... 60.335821 60.458738array([0, 0, 60.372794, 0, 3e-06, 3e-06, 60.335821, 60.458738],\n      dtype=object)earthsearch:boa_offset_applied()boolTruearray(True)updated(time)&lt;U24'2022-11-06T13:16:38.195Z' ... '...array(['2022-11-06T13:16:38.195Z', '2022-11-06T12:52:50.337Z',\n       '2022-11-06T12:55:07.931Z', '2022-11-06T12:54:05.312Z',\n       '2022-11-06T13:14:37.621Z', '2022-11-06T13:12:58.202Z',\n       '2022-11-06T12:53:48.090Z', '2022-11-06T13:14:57.270Z'],\n      dtype='&lt;U24')s2:unclassified_percentage(time)float640.1322 0.1796 ... 0.9699 0.2326array([0.132232, 0.179595, 0.340984, 0.291771, 0.195772, 2.000013,\n       0.96991 , 0.232552])earthsearch:payload_id(time)&lt;U74'roda-sentinel2/workflow-sentine...array(['roda-sentinel2/workflow-sentinel2-to-stac/58f82edc8c40c1d0d56d8a26269d02eb',\n       'roda-sentinel2/workflow-sentinel2-to-stac/9b8a11349c8bf4f2437e596421530090',\n       'roda-sentinel2/workflow-sentinel2-to-stac/fd889d2975690939ea2990c8b784fc31',\n       'roda-sentinel2/workflow-sentinel2-to-stac/1cea63f7fa1542d8a1c7bcd0b774584d',\n       'roda-sentinel2/workflow-sentinel2-to-stac/4f39107c8fe71ec8f29d674a811d6c21',\n       'roda-sentinel2/workflow-sentinel2-to-stac/6245fb70f8c638a7681c672a7bf7a006',\n       'roda-sentinel2/workflow-sentinel2-to-stac/b5b785b4fac74933d25c20aec8ce66bd',\n       'roda-sentinel2/workflow-sentinel2-to-stac/bff15f451a9bb2107d01668bb557f526'],\n      dtype='&lt;U74')s2:high_proba_clouds_percentage(time)float640.007488 0.000484 ... 0.000537array([7.488000e-03, 4.840000e-04, 3.348470e-01, 4.827590e-01,\n       3.000000e-06, 3.067140e+00, 2.117714e+00, 5.370000e-04])platform(time)&lt;U11'sentinel-2b' ... 'sentinel-2a'array(['sentinel-2b', 'sentinel-2a', 'sentinel-2a', 'sentinel-2a',\n       'sentinel-2b', 'sentinel-2a', 'sentinel-2a', 'sentinel-2a'],\n      dtype='&lt;U11')s2:degraded_msi_data_percentage(time)object0 0 0.0045 0 0 0 0.0045 0.0044array([0, 0, 0.0045, 0, 0, 0, 0.0045, 0.0044], dtype=object)s2:saturated_defective_pixel_percentage()int320array(0)s2:not_vegetated_percentage(time)float6410.43 11.0 12.07 ... 35.87 34.91array([10.429534, 11.000518, 12.070826, 30.188122, 34.062394, 34.022531,\n       35.867879, 34.906355])s2:product_type()&lt;U7'S2MSI2A'array('S2MSI2A', dtype='&lt;U7')proj:epsg()int3232633array(32633)s2:thin_cirrus_percentage(time)float647.433 0.000713 ... 0.4116 0.001074array([7.43253e+00, 7.13000e-04, 5.00000e-05, 5.48640e-02, 5.43800e-03,\n       1.80420e-02, 4.11558e-01, 1.07400e-03])mgrs:utm_zone()int3233array(33)earthsearch:s3_path(time)&lt;U79's3://sentinel-cogs/sentinel-s2-...array(['s3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/6/S2B_33UXU_20220619_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/6/S2A_33UXU_20220624_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/6/S2A_33UXU_20220627_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/7/S2A_33UXU_20220714_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/7/S2B_33UXU_20220719_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/8/S2A_33UXU_20220803_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/8/S2A_33UXU_20220816_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/8/S2A_33UXU_20220826_0_L2A'],\n      dtype='&lt;U79')grid:code()&lt;U10'MGRS-33UXU'array('MGRS-33UXU', dtype='&lt;U10')s2:cloud_shadow_percentage(time)object0 0.000989 1.168417 ... 1.743145 0array([0, 0.000989, 1.168417, 2.347726, 0, 4.482971, 1.743145, 0],\n      dtype=object)s2:generation_time(time)&lt;U27'2022-06-19T11:43:29.000000Z' .....array(['2022-06-19T11:43:29.000000Z', '2022-06-24T14:39:14.000000Z',\n       '2022-06-27T16:28:10.000000Z', '2022-07-14T17:50:57.000000Z',\n       '2022-07-19T11:39:43.000000Z', '2022-08-03T13:51:55.000000Z',\n       '2022-08-16T16:25:57.000000Z', '2022-08-26T16:20:59.000000Z'],\n      dtype='&lt;U27')s2:snow_ice_percentage()int320array(0)s2:granule_id(time)&lt;U62'S2B_OPER_MSI_L2A_TL_2BPS_202206...array(['S2B_OPER_MSI_L2A_TL_2BPS_20220619T114329_A027604_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220624T143914_A036584_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220627T162810_A036627_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220714T175057_A036870_T33UXU_N04.00',\n       'S2B_OPER_MSI_L2A_TL_2BPS_20220719T113943_A028033_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220803T135155_A037156_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220816T162557_A037342_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220826T162059_A037485_T33UXU_N04.00'],\n      dtype='&lt;U62')title(band)&lt;U30'Red (band 4) - 10m' ... 'Scene ...array(['Red (band 4) - 10m', 'Green (band 3) - 10m',\n       'Blue (band 2) - 10m', 'NIR 1 (band 8) - 10m',\n       'Scene classification map (SCL)'], dtype='&lt;U30')gsd(band)object10 10 10 10 Nonearray([10, 10, 10, 10, None], dtype=object)raster:bands(band)object{'nodata': 0, 'data_type': 'uint...array([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint8', 'spatial_resolution': 20}],\n      dtype=object)common_name(band)object'red' 'green' 'blue' 'nir' Nonearray(['red', 'green', 'blue', 'nir', None], dtype=object)center_wavelength(band)object0.665 0.56 0.49 0.842 Nonearray([0.665, 0.56, 0.49, 0.842, None], dtype=object)full_width_half_max(band)object0.038 0.045 0.098 0.145 Nonearray([0.038, 0.045, 0.098, 0.145, None], dtype=object)epsg()int3232633array(32633)Indexes: (4)timePandasIndexPandasIndex(DatetimeIndex(['2022-06-19 10:06:08.087000', '2022-06-24 10:06:16.177000',\n               '2022-06-27 10:16:12.822000', '2022-07-14 10:06:16.331000',\n               '2022-07-19 10:06:08.645000', '2022-08-03 10:06:14.409000',\n               '2022-08-16 10:16:12.609000', '2022-08-26 10:16:12.680000'],\n              dtype='datetime64[ns]', name='time', freq=None))bandPandasIndexPandasIndex(Index(['red', 'green', 'blue', 'nir', 'scl'], dtype='object', name='band'))xPandasIndexPandasIndex(Index([619000.0, 619200.0, 619400.0, 619600.0, 619800.0, 620000.0, 620200.0,\n       620400.0, 620600.0, 620800.0,\n       ...\n       645600.0, 645800.0, 646000.0, 646200.0, 646400.0, 646600.0, 646800.0,\n       647000.0, 647200.0, 647400.0],\n      dtype='float64', name='x', length=143))yPandasIndexPandasIndex(Index([5823000.0, 5822800.0, 5822600.0, 5822400.0, 5822200.0, 5822000.0,\n       5821800.0, 5821600.0, 5821400.0, 5821200.0,\n       ...\n       5797000.0, 5796800.0, 5796600.0, 5796400.0, 5796200.0, 5796000.0,\n       5795800.0, 5795600.0, 5795400.0, 5795200.0],\n      dtype='float64', name='y', length=140))Attributes: (4)spec :RasterSpec(epsg=32633, bounds=(619000, 5795000, 647600, 5823000), resolutions_xy=(200, 200))crs :epsg:32633transform :| 200.00, 0.00, 619000.00|\n| 0.00,-200.00, 5823000.00|\n| 0.00, 0.00, 1.00|resolution :200\n\n\n\n\n\nassets = c(\"red\",\"green\",\"blue\",\"nir\",\"scl\")\ncol = stac_image_collection(items$features, asset_names = assets)\nextent = list(\n  t0 = time_extent[1], t1 = time_extent[2],\n  left = bbox[\"xmin\"], bottom = bbox[\"ymin\"], \n  right = bbox[\"xmax\"], top = bbox[\"ymax\"]\n)\nview = cube_view(\n  srs = \"epsg:32633\",  \n  extent = extent,\n  dx = 200, dy = 200, dt = \"P1D\",\n  aggregation = \"median\",\n  resampling = \"bilinear\"\n)\ns2_mask = image_mask(\"scl\", values = c(3,8,9))\ncube = raster_cube(col, view, mask = s2_mask)\ncube\n\nA data cube proxy object\n\nDimensions:\n               low             high count pixel_size chunk_size\nt       2022-05-01       2022-10-01   154        P1D          1\ny 5795085.08512264 5822885.08512264   139        200        128\nx 619173.072575812 647573.072575812   142        200        128\n\nBands:\n   name offset scale nodata unit\n1  blue      0     1    NaN     \n2 green      0     1    NaN     \n3   nir      0     1    NaN     \n4   red      0     1    NaN     \n5   scl      0     1    NaN     \n\n\n\n\n\nAnd now we have a data cube! Let’s so a simple reduction over time of our data to view an RGB composite.\n\nPythonR\n\n\n\nrgb = cube.sel(band=[\"red\", \"green\", \"blue\"]).median(\"time\", keep_attrs=True)\nrgb = rgb.compute()\nrgb.plot.imshow(\n    rgb=\"band\",\n    robust=True\n)\n\n\n\n\n\n\n\ngdalcubes_options(parallel = 4, cache = TRUE) \nrgb = cube |&gt; \n    select_bands(c(\"blue\",\"green\",\"red\")) |&gt; \n    reduce_time(c(\"median(blue)\", \"median(green)\", \"median(red)\")) \nrgb |&gt; \n    plot(rgb = 3:1) \n\n\n\n\n\n\n\nAnd there we have it, a side by side how-to create on-demand STAC data cubes. If you want to get more functionalities and examples on what can be done with the packages please refer to the materials of my lecture: Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python.\nHappy STACing!\n\n\n\n\n\nReferences\n\nAppel, Marius, Edzer Pebesma, and Matthias Mohr. 2021. “Cloud-Based Processing of Satellite Image Collections in r Using STAC, COGs, and on-Demand Data Cubes.” 2021. https://r-spatial.org/r/2021/04/23/cloud-based-cubes.html.\n\n\nDuckworth, Jon. 2021. “STAC Python Client.” 2021. https://pystac-client.readthedocs.io/en/stable/index.html.\n\n\nJoseph, Gabe. 2023. “Stackstac: Easier Cloud-Native Geoprocessing.” 2023. https://stackstac.readthedocs.io/en/latest/.\n\n\nNavarro, Danielle. 2022. “Porting a Distill Blog to Quarto.” April 20, 2022. https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto.\n\n\nSimoes, Rolf, Felipe Souza, Matheus Zaglia, Gilberto Ribeiro Queiroz, Rafael Santos, and Karine Ferreira. 2021. “Rstac: An r Package to Access Spatiotemporal Asset Catalog Satellite Imagery.” In 2021 IEEE International Geoscience and Remote Sensing Symposium IGARSS, 7674–77. https://doi.org/10.1109/IGARSS47720.2021.9553518.\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{abad2023,\n  author = {Abad, Lorena},\n  title = {STAC Across {Languages}},\n  date = {2023-10-17},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAbad, Lorena. 2023. “STAC Across Languages.” October 17,\n2023."
  },
  {
    "objectID": "posts/2023-10-17-stac-across-languages/index.html",
    "href": "posts/2023-10-17-stac-across-languages/index.html",
    "title": "STAC across Languages",
    "section": "",
    "text": "Some background\nOver a month ago I was invited as a lecturer at the OpenGeoHub 2023 Summer School in Poznan, Poland. It was a great experience, meeting brilliant people, learning from other lecturers and enjoying the city. Many thanks to the organizers!\nMy lecture was on Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python. Following on the lecture and inspired by the geocompx blogpost on geographic data analysis in R and Python, I started the quest to do a similar post with the basic content of my lecture.\nWhy do I call it a quest? Well, it took me a while. Before this post, my website was based on distill, so the migration process from a distill-based website to a quarto-based one was the first task. Why did I have to do the migration? Because Quarto allows the combination of two or more programming languages in a single file, crucial for data science across languages.\n\n\nI managed to migrate thanks to JaKub Nowosad’s talk at OpenGeoHub23 (Nowosad 2023), the Quarto documentation and to posts from Danielle Navarro (Navarro 2022). Big thanks!\nBut in any case, I can now inaugurate my new website with a post on how to query STAC data and create on-demand data cubes with R and Python! So let’s get to it.\n\n\nLibraries\nLet’s first load the libraries needed. Here you can get familiar with the tab setting of this post. Clicking on the R or Python tab will switch between languages. Clicking on either tab will switch the panel in the whole document.\n\nPythonR\n\n\n\nimport dask.array as da # handle dask arrays\nimport geopandas as gpd # handle geospatial data frames\nfrom IPython.display import Image # visualize URLs\nimport pystac_client # connecting to the STAC API\nfrom rasterio.enums import Resampling # perform re-sampling operations\nimport shapely # create vector objects\nimport stackstac # build an on-demand STAC data cube\n\n\n\n\nlibrary(dplyr) # data wrangling\nlibrary(gdalcubes) # on-demand data cubes\nlibrary(knitr) # visualize URLs\nlibrary(rstac) # connecting to the STAC API\nlibrary(sf) # handle geospatial data frames\n\n\n\n\n\n\nQuerying STAC data\nSTAC stands for SpatioTemporal Asset Catalog and it is “a common language to describe geospatial information, so it can more easily be worked with, indexed, and discovered”.\nThere are several APIs available to query data, you can browse them all in the STAC catalog index. Some of these APIs will require authentication to access the data. We will use the Earth Search catalog for this post, which allows querying data on Amazon Web Services (AWS). The data we will fetch (Sentinel-2) does not require authentication.\nIn Python we can use the pystac-client library (Duckworth 2021), while in R we can use the rstac library (Simoes et al. 2021). Refer to their documentation pages for more information.\nTo start fetching data, we will open a client. We can then see the collections available for this API. In Python we call a for loop on the client collections, while in R we use the get_request() function. Both methods make an HTTP GET request to STAC web services.\n\nPythonR\n\n\n\napi_url = 'https://earth-search.aws.element84.com/v1'\nclient = pystac_client.Client.open(api_url)\nfor collection in client.get_collections():\n    print(collection)\n\n&lt;CollectionClient id=cop-dem-glo-30&gt;\n&lt;CollectionClient id=naip&gt;\n&lt;CollectionClient id=sentinel-2-l2a&gt;\n&lt;CollectionClient id=sentinel-2-l1c&gt;\n&lt;CollectionClient id=landsat-c2-l2&gt;\n&lt;CollectionClient id=cop-dem-glo-90&gt;\n&lt;CollectionClient id=sentinel-1-grd&gt;\n\n\n\n\n\napi_url = \"https://earth-search.aws.element84.com/v1\"\nclient = stac(api_url)\ncollections(client) |&gt; get_request()\n\n###STACCollectionList\n- collections (7 item(s)):\n  - cop-dem-glo-30\n  - naip\n  - sentinel-2-l2a\n  - sentinel-2-l1c\n  - landsat-c2-l2\n  - cop-dem-glo-90\n  - sentinel-1-grd\n- field(s): collections, links, context\n\n\n\n\n\nWe will choose here Sentinel-2 Level 2a data, which provides atmospherically corrected data representing surface reflectance.\nWe can also set the coordinates for our query, in this case a POINT geometry, which will help to retrieve scenes that intersect with it. At last we can also set a time extent, where we define the start and end of our query.\n\nPythonR\n\n\n\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = shapely.Point(lon, lat)\n# date range\ntime_extent = '2022-05-01/2022-10-01'\n\n\n\n\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = st_point(c(lon, lat))\n# date range\ntime_extent = c(\"2022-05-01\", \"2022-10-01\")\n\n\n\n\nNow, we can pass the arguments to our search. Note for the R search we had to slightly format the datetime parameter. This is because of a bug when fetching the data from STAC.\nYou will see we can also query based on scene metadata. In this example we look for scenes with cloud cover lower than 10% for the whole scene. In Python we do the filtering within the search, while in R we perform it after the HTTP POST request.\nFinally, we check how many items we fetched with our query, also to compare that R and Python give us the same results.\n\nPythonR\n\n\n\nsearch = client.search(\n    collections=[collection],\n    intersects=point,\n    datetime=time_extent,\n    query=[\"eo:cloud_cover&lt;10\"],\n)\nitems = search.item_collection()\nlen(items)\n\n8\n\n\n\n\n\nitems = client  |&gt; \n  stac_search(\n      collections = collection,\n      intersects = point, \n      datetime = paste0(time_extent,\"T00:00:00Z\", collapse = \"/\"),\n      limit = 100\n    ) |&gt; \n  post_request() |&gt; \n  items_filter(\n    filter_fn = function(x) {x$properties$`eo:cloud_cover` &lt; 10}\n  )\nitems_length(items)\n\n[1] 8\n\n\n\n\n\nTo explore the items as data frames we can either convert to a geopandas table in Python or to an sf table in R. We added an extra fid column to allow index matching to the original item list.\n\nPythonR\n\n\n\nitems_df = gpd.GeoDataFrame.from_features(items.to_dict(), crs=\"epsg:4326\")\nitems_df\n\n                                            geometry  ...                   updated\n0  POLYGON ((16.49848 53.24020, 17.39166 53.22562...  ...  2022-11-06T13:14:57.270Z\n1  POLYGON ((16.49848 53.24020, 17.39346 53.22558...  ...  2022-11-06T12:53:48.090Z\n2  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:12:58.202Z\n3  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:14:37.621Z\n4  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T12:54:05.312Z\n5  POLYGON ((16.49848 53.24020, 17.39346 53.22558...  ...  2022-11-06T12:55:07.931Z\n6  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T12:52:50.337Z\n7  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:16:38.195Z\n\n[8 rows x 42 columns]\n\n\n\n\n\n# we add an extra column to be able to subset the original item list\nitems_df = items_as_sf(items) |&gt; \n  mutate(fid = row_number())\n# wrap function around st_as_sf and as_tibble just for nicer printing\nst_as_sf(as_tibble(items_df))\n\nSimple feature collection with 8 features and 42 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 16.465 ymin: 52.22258 xmax: 18.14175 ymax: 53.2402\nGeodetic CRS:  WGS 84\n# A tibble: 8 × 43\n  `s2:generation_time`        s2:medium_proba_clouds_percenta…¹ `s2:product_uri`\n  &lt;chr&gt;                                                   &lt;dbl&gt; &lt;chr&gt;           \n1 2022-08-26T16:20:59.000000Z                           0.00172 S2A_MSIL2A_2022…\n2 2022-08-16T16:25:57.000000Z                           2.27    S2A_MSIL2A_2022…\n3 2022-08-03T13:51:55.000000Z                           5.69    S2A_MSIL2A_2022…\n4 2022-07-19T11:39:43.000000Z                           0.00007 S2B_MSIL2A_2022…\n5 2022-07-14T17:50:57.000000Z                           1.29    S2A_MSIL2A_2022…\n6 2022-06-27T16:28:10.000000Z                           0.732   S2A_MSIL2A_2022…\n7 2022-06-24T14:39:14.000000Z                           0.00130 S2A_MSIL2A_2022…\n8 2022-06-19T11:43:29.000000Z                           0.0514  S2B_MSIL2A_2022…\n# ℹ abbreviated name: ¹​`s2:medium_proba_clouds_percentage`\n# ℹ 40 more variables: `s2:processing_baseline` &lt;chr&gt;, `grid:code` &lt;chr&gt;,\n#   `s2:product_type` &lt;chr&gt;, `s2:snow_ice_percentage` &lt;dbl&gt;,\n#   `s2:vegetation_percentage` &lt;dbl&gt;, `processing:software` &lt;chr&gt;,\n#   `s2:high_proba_clouds_percentage` &lt;dbl&gt;,\n#   `s2:unclassified_percentage` &lt;dbl&gt;, `s2:water_percentage` &lt;dbl&gt;,\n#   `s2:not_vegetated_percentage` &lt;dbl&gt;, `s2:cloud_shadow_percentage` &lt;dbl&gt;, …\n\n\n\n\n\nWhen we have the items as data frame, we can further filter the data based on the table columns. Below, we filter for data with a cloud cover lower than 2% and with a no-data pixel percentage below 10%.\nTo illustrate how to fetch item properties, we can select the first item in our list and get the datetime of this scene.\n\nPythonR\n\n\n\nids = items_df.loc[\n  (items_df['eo:cloud_cover'] &lt;= 2) &\n  (items_df['s2:nodata_pixel_percentage'] &lt;= 10)\n]\nitem = items[ids.index[0]]\nitem.datetime\n\ndatetime.datetime(2022, 7, 19, 10, 6, 8, 645000, tzinfo=tzutc())\n\n\n\n\n\nids = items_df |&gt; \n  filter(\n    `eo:cloud_cover` &lt;= 2, `s2:nodata_pixel_percentage` &lt;= 10\n  ) |&gt; \n  pull(fid)\nitem = items$features[[ids[1]]]\nitem$properties$datetime\n\n[1] \"2022-07-19T10:06:08.645000Z\"\n\n\n\n\n\nWe can also take a look at the selected scene by fetching the item thumbnail. Here you will see that both R and Python return the same scene, as they should! 😉.\n\nPythonR\n\n\n\nthumbnail = item.assets[\"thumbnail\"].href\nImage(url = thumbnail)\n\n\n\n\n\n\n\nitem |&gt; \n  assets_url(asset_names = \"thumbnail\") |&gt; \n  include_graphics()\n\n\n\n\n\n\n\n\n\nCreating a STAC data cube\nFetching individual scenes is interesting, but the real power of working with the STAC API is the possibility to work with big EO data without the need to download a single pixel to your own computer!\nFor this, we can create an on-demand data cube that can help us organize and analyze our data, doing the data wrangling needed and only fetching the data we need as a final step.\nTo create on-demand data cubes, we will use R’s gdalcubes (Appel, Pebesma, and Mohr 2021) and Python’s stackstac (Joseph 2023).\nWe will create our data cube on a smaller subset. Here we load a GeoJSON file of Poznan, where the summer school took place. We read it in and extract its bounding box.\n\nPythonR\n\n\n\npoznan = \"https://raw.githubusercontent.com/loreabad6/ogh23/main/data/poznan.geojson\"\nfootprint = gpd.read_file(poznan)\nbbox = footprint.total_bounds\n\n\n\n\npoznan = \"https://raw.githubusercontent.com/loreabad6/ogh23/main/data/poznan.geojson\"\nfootprint = read_sf(poznan)\nbbox = footprint |&gt; st_transform(crs = 32633) |&gt; st_bbox()\n\n\n\n\nNow we can create our cube. The following code chunk has several steps depending if you are in the R or Python tab. I kept it as a single block since this is how we get an on-demand data cube on each end. In essence what we do is:\n\nDefine the assets we want.\n\nI selected RGB+NIR bands to illustrate this process, but of course we can set any other band. I included the [SCL band] (https://sentinels.copernicus.eu/web/sentinel/technical-guides/sentinel-2-msi/level-2a/algorithm-overview) which we will use to mask clouds.\n\nSet-up the cube.\n\n\nIn Python we do this with the stackstac.stack function, where we can set the resolution, assets, bounding box, and re-sampling method for the data. Separately we define a cloud mask to get remove invalid pixels.\nIn R, this works in a lengthier way, using more intermediate functions. We first define the collection with the assets with the stac_image_collection function. Then, we define an extent in the form of a list. This extent will have the start and end date as well as the bounding box of our cube. Now we can define a view, which defines the CRS, spatial and temporal resolution, and the aggregation and re-sampling method. We finally define the cloud mask with image_mask and can then build a raster_cube.\n\n\nPythonR\n\n\n\nassets = [\"red\",\"green\",\"blue\",\"nir\",\"scl\"]\ncube_all = stackstac.stack(\n    items,\n    assets=assets,\n    resolution=200,\n    bounds_latlon=bbox,\n    resampling=Resampling.bilinear\n)\nscl = cube_all.sel(band=[\"scl\"])\ns2_mask = da.isin(scl, [3,8,9])\ncube = cube_all.where(~s2_mask)\ncube\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'stackstac-ed6b2722797064800cbe8c9010ae4cbc' (time: 8,\n                                                                band: 5,\n                                                                y: 140, x: 143)&gt;\ndask.array&lt;where, shape=(8, 5, 140, 143), dtype=float64, chunksize=(1, 1, 140, 143), chunktype=numpy.ndarray&gt;\nCoordinates: (12/52)\n  * time                                     (time) datetime64[ns] 2022-06-19...\n    id                                       (time) &lt;U24 'S2B_33UXU_20220619_...\n  * band                                     (band) &lt;U5 'red' 'green' ... 'scl'\n  * x                                        (x) float64 6.19e+05 ... 6.474e+05\n  * y                                        (y) float64 5.823e+06 ... 5.795e+06\n    s2:reflectance_conversion_factor         (time) float64 0.9691 ... 0.9779\n    ...                                       ...\n    raster:bands                             (band) object {'nodata': 0, 'dat...\n    title                                    (band) &lt;U30 'Red (band 4) - 10m'...\n    common_name                              (band) object 'red' ... None\n    center_wavelength                        (band) object 0.665 0.56 ... None\n    full_width_half_max                      (band) object 0.038 0.045 ... None\n    epsg                                     int32 32633\nAttributes:\n    spec:        RasterSpec(epsg=32633, bounds=(619000, 5795000, 647600, 5823...\n    crs:         epsg:32633\n    transform:   | 200.00, 0.00, 619000.00|\\n| 0.00,-200.00, 5823000.00|\\n| 0...\n    resolution:  200xarray.DataArray'stackstac-ed6b2722797064800cbe8c9010ae4cbc'time: 8band: 5y: 140x: 143dask.array&lt;chunksize=(1, 1, 140, 143), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n6.11 MiB\n156.41 kiB\n\n\nShape\n(8, 5, 140, 143)\n(1, 1, 140, 143)\n\n\nDask graph\n40 chunks in 10 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (52)time(time)datetime64[ns]2022-06-19T10:06:08.087000 ... 2...array(['2022-06-19T10:06:08.087000000', '2022-06-24T10:06:16.177000000',\n       '2022-06-27T10:16:12.822000000', '2022-07-14T10:06:16.331000000',\n       '2022-07-19T10:06:08.645000000', '2022-08-03T10:06:14.409000000',\n       '2022-08-16T10:16:12.609000000', '2022-08-26T10:16:12.680000000'],\n      dtype='datetime64[ns]')id(time)&lt;U24'S2B_33UXU_20220619_0_L2A' ... '...array(['S2B_33UXU_20220619_0_L2A', 'S2A_33UXU_20220624_0_L2A',\n       'S2A_33UXU_20220627_0_L2A', 'S2A_33UXU_20220714_0_L2A',\n       'S2B_33UXU_20220719_0_L2A', 'S2A_33UXU_20220803_0_L2A',\n       'S2A_33UXU_20220816_0_L2A', 'S2A_33UXU_20220826_0_L2A'],\n      dtype='&lt;U24')band(band)&lt;U5'red' 'green' 'blue' 'nir' 'scl'array(['red', 'green', 'blue', 'nir', 'scl'], dtype='&lt;U5')x(x)float646.19e+05 6.192e+05 ... 6.474e+05array([619000., 619200., 619400., 619600., 619800., 620000., 620200., 620400.,\n       620600., 620800., 621000., 621200., 621400., 621600., 621800., 622000.,\n       622200., 622400., 622600., 622800., 623000., 623200., 623400., 623600.,\n       623800., 624000., 624200., 624400., 624600., 624800., 625000., 625200.,\n       625400., 625600., 625800., 626000., 626200., 626400., 626600., 626800.,\n       627000., 627200., 627400., 627600., 627800., 628000., 628200., 628400.,\n       628600., 628800., 629000., 629200., 629400., 629600., 629800., 630000.,\n       630200., 630400., 630600., 630800., 631000., 631200., 631400., 631600.,\n       631800., 632000., 632200., 632400., 632600., 632800., 633000., 633200.,\n       633400., 633600., 633800., 634000., 634200., 634400., 634600., 634800.,\n       635000., 635200., 635400., 635600., 635800., 636000., 636200., 636400.,\n       636600., 636800., 637000., 637200., 637400., 637600., 637800., 638000.,\n       638200., 638400., 638600., 638800., 639000., 639200., 639400., 639600.,\n       639800., 640000., 640200., 640400., 640600., 640800., 641000., 641200.,\n       641400., 641600., 641800., 642000., 642200., 642400., 642600., 642800.,\n       643000., 643200., 643400., 643600., 643800., 644000., 644200., 644400.,\n       644600., 644800., 645000., 645200., 645400., 645600., 645800., 646000.,\n       646200., 646400., 646600., 646800., 647000., 647200., 647400.])y(y)float645.823e+06 5.823e+06 ... 5.795e+06array([5823000., 5822800., 5822600., 5822400., 5822200., 5822000., 5821800.,\n       5821600., 5821400., 5821200., 5821000., 5820800., 5820600., 5820400.,\n       5820200., 5820000., 5819800., 5819600., 5819400., 5819200., 5819000.,\n       5818800., 5818600., 5818400., 5818200., 5818000., 5817800., 5817600.,\n       5817400., 5817200., 5817000., 5816800., 5816600., 5816400., 5816200.,\n       5816000., 5815800., 5815600., 5815400., 5815200., 5815000., 5814800.,\n       5814600., 5814400., 5814200., 5814000., 5813800., 5813600., 5813400.,\n       5813200., 5813000., 5812800., 5812600., 5812400., 5812200., 5812000.,\n       5811800., 5811600., 5811400., 5811200., 5811000., 5810800., 5810600.,\n       5810400., 5810200., 5810000., 5809800., 5809600., 5809400., 5809200.,\n       5809000., 5808800., 5808600., 5808400., 5808200., 5808000., 5807800.,\n       5807600., 5807400., 5807200., 5807000., 5806800., 5806600., 5806400.,\n       5806200., 5806000., 5805800., 5805600., 5805400., 5805200., 5805000.,\n       5804800., 5804600., 5804400., 5804200., 5804000., 5803800., 5803600.,\n       5803400., 5803200., 5803000., 5802800., 5802600., 5802400., 5802200.,\n       5802000., 5801800., 5801600., 5801400., 5801200., 5801000., 5800800.,\n       5800600., 5800400., 5800200., 5800000., 5799800., 5799600., 5799400.,\n       5799200., 5799000., 5798800., 5798600., 5798400., 5798200., 5798000.,\n       5797800., 5797600., 5797400., 5797200., 5797000., 5796800., 5796600.,\n       5796400., 5796200., 5796000., 5795800., 5795600., 5795400., 5795200.])s2:reflectance_conversion_factor(time)float640.9691 0.9683 ... 0.9741 0.9779array([0.96912679, 0.96833888, 0.96797547, 0.96750684, 0.96788495,\n       0.97039583, 0.97414715, 0.9779224 ])s2:degraded_msi_data_percentage(time)object0 0 0.0045 0 0 0 0.0045 0.0044array([0, 0, 0.0045, 0, 0, 0, 0.0045, 0.0044], dtype=object)earthsearch:boa_offset_applied()boolTruearray(True)processing:software()object{'sentinel2-to-stac': '0.1.0'}array({'sentinel2-to-stac': '0.1.0'}, dtype=object)created(time)&lt;U24'2022-11-06T13:16:38.195Z' ... '...array(['2022-11-06T13:16:38.195Z', '2022-11-06T12:52:50.337Z',\n       '2022-11-06T12:55:07.931Z', '2022-11-06T12:54:05.312Z',\n       '2022-11-06T13:14:37.621Z', '2022-11-06T13:12:58.202Z',\n       '2022-11-06T12:53:48.090Z', '2022-11-06T13:14:57.270Z'],\n      dtype='&lt;U24')s2:nodata_pixel_percentage(time)object0 0 ... 60.335821 60.458738array([0, 0, 60.372794, 0, 3e-06, 3e-06, 60.335821, 60.458738],\n      dtype=object)s2:datatake_type()&lt;U8'INS-NOBS'array('INS-NOBS', dtype='&lt;U8')grid:code()&lt;U10'MGRS-33UXU'array('MGRS-33UXU', dtype='&lt;U10')s2:datatake_id(time)&lt;U34'GS2B_20220619T100029_027604_N04...array(['GS2B_20220619T100029_027604_N04.00',\n       'GS2A_20220624T100041_036584_N04.00',\n       'GS2A_20220627T100611_036627_N04.00',\n       'GS2A_20220714T100041_036870_N04.00',\n       'GS2B_20220719T095559_028033_N04.00',\n       'GS2A_20220803T100041_037156_N04.00',\n       'GS2A_20220816T100611_037342_N04.00',\n       'GS2A_20220826T100611_037485_N04.00'], dtype='&lt;U34')constellation()&lt;U10'sentinel-2'array('sentinel-2', dtype='&lt;U10')earthsearch:payload_id(time)&lt;U74'roda-sentinel2/workflow-sentine...array(['roda-sentinel2/workflow-sentinel2-to-stac/58f82edc8c40c1d0d56d8a26269d02eb',\n       'roda-sentinel2/workflow-sentinel2-to-stac/9b8a11349c8bf4f2437e596421530090',\n       'roda-sentinel2/workflow-sentinel2-to-stac/fd889d2975690939ea2990c8b784fc31',\n       'roda-sentinel2/workflow-sentinel2-to-stac/1cea63f7fa1542d8a1c7bcd0b774584d',\n       'roda-sentinel2/workflow-sentinel2-to-stac/4f39107c8fe71ec8f29d674a811d6c21',\n       'roda-sentinel2/workflow-sentinel2-to-stac/6245fb70f8c638a7681c672a7bf7a006',\n       'roda-sentinel2/workflow-sentinel2-to-stac/b5b785b4fac74933d25c20aec8ce66bd',\n       'roda-sentinel2/workflow-sentinel2-to-stac/bff15f451a9bb2107d01668bb557f526'],\n      dtype='&lt;U74')s2:generation_time(time)&lt;U27'2022-06-19T11:43:29.000000Z' .....array(['2022-06-19T11:43:29.000000Z', '2022-06-24T14:39:14.000000Z',\n       '2022-06-27T16:28:10.000000Z', '2022-07-14T17:50:57.000000Z',\n       '2022-07-19T11:39:43.000000Z', '2022-08-03T13:51:55.000000Z',\n       '2022-08-16T16:25:57.000000Z', '2022-08-26T16:20:59.000000Z'],\n      dtype='&lt;U27')s2:sequence()&lt;U1'0'array('0', dtype='&lt;U1')eo:cloud_cover(time)float647.491 0.002495 ... 4.8 0.003331array([7.491449e+00, 2.495000e-03, 1.067175e+00, 1.825375e+00,\n       5.511000e-03, 8.775087e+00, 4.800238e+00, 3.331000e-03])mgrs:grid_square()&lt;U2'XU'array('XU', dtype='&lt;U2')s2:high_proba_clouds_percentage(time)float640.007488 0.000484 ... 0.000537array([7.488000e-03, 4.840000e-04, 3.348470e-01, 4.827590e-01,\n       3.000000e-06, 3.067140e+00, 2.117714e+00, 5.370000e-04])s2:processing_baseline()&lt;U5'04.00'array('04.00', dtype='&lt;U5')s2:granule_id(time)&lt;U62'S2B_OPER_MSI_L2A_TL_2BPS_202206...array(['S2B_OPER_MSI_L2A_TL_2BPS_20220619T114329_A027604_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220624T143914_A036584_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220627T162810_A036627_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220714T175057_A036870_T33UXU_N04.00',\n       'S2B_OPER_MSI_L2A_TL_2BPS_20220719T113943_A028033_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220803T135155_A037156_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220816T162557_A037342_T33UXU_N04.00',\n       'S2A_OPER_MSI_L2A_TL_ATOS_20220826T162059_A037485_T33UXU_N04.00'],\n      dtype='&lt;U62')instruments()&lt;U3'msi'array('msi', dtype='&lt;U3')mgrs:latitude_band()&lt;U1'U'array('U', dtype='&lt;U1')mgrs:utm_zone()int3233array(33)s2:thin_cirrus_percentage(time)float647.433 0.000713 ... 0.4116 0.001074array([7.43253e+00, 7.13000e-04, 5.00000e-05, 5.48640e-02, 5.43800e-03,\n       1.80420e-02, 4.11558e-01, 1.07400e-03])s2:dark_features_percentage(time)float640.002057 0.004107 ... 0.01486array([0.002057, 0.004107, 0.006966, 0.00361 , 0.004429, 0.003646,\n       0.010289, 0.01486 ])s2:product_type()&lt;U7'S2MSI2A'array('S2MSI2A', dtype='&lt;U7')s2:product_uri(time)&lt;U65'S2B_MSIL2A_20220619T100029_N040...array(['S2B_MSIL2A_20220619T100029_N0400_R122_T33UXU_20220619T114329.SAFE',\n       'S2A_MSIL2A_20220624T100041_N0400_R122_T33UXU_20220624T143914.SAFE',\n       'S2A_MSIL2A_20220627T100611_N0400_R022_T33UXU_20220627T162810.SAFE',\n       'S2A_MSIL2A_20220714T100041_N0400_R122_T33UXU_20220714T175057.SAFE',\n       'S2B_MSIL2A_20220719T095559_N0400_R122_T33UXU_20220719T113943.SAFE',\n       'S2A_MSIL2A_20220803T100041_N0400_R122_T33UXU_20220803T135155.SAFE',\n       'S2A_MSIL2A_20220816T100611_N0400_R022_T33UXU_20220816T162557.SAFE',\n       'S2A_MSIL2A_20220826T100611_N0400_R022_T33UXU_20220826T162059.SAFE'],\n      dtype='&lt;U65')earthsearch:s3_path(time)&lt;U79's3://sentinel-cogs/sentinel-s2-...array(['s3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/6/S2B_33UXU_20220619_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/6/S2A_33UXU_20220624_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/6/S2A_33UXU_20220627_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/7/S2A_33UXU_20220714_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/7/S2B_33UXU_20220719_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/8/S2A_33UXU_20220803_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/8/S2A_33UXU_20220816_0_L2A',\n       's3://sentinel-cogs/sentinel-s2-l2a-cogs/33/U/XU/2022/8/S2A_33UXU_20220826_0_L2A'],\n      dtype='&lt;U79')s2:snow_ice_percentage()int320array(0)s2:not_vegetated_percentage(time)float6410.43 11.0 12.07 ... 35.87 34.91array([10.429534, 11.000518, 12.070826, 30.188122, 34.062394, 34.022531,\n       35.867879, 34.906355])s2:cloud_shadow_percentage(time)object0 0.000989 1.168417 ... 1.743145 0array([0, 0.000989, 1.168417, 2.347726, 0, 4.482971, 1.743145, 0],\n      dtype=object)s2:vegetation_percentage(time)float6480.88 87.55 84.59 ... 55.84 64.06array([80.8779  , 87.545991, 84.593809, 64.089584, 64.467937, 49.599385,\n       55.840641, 64.060515])s2:unclassified_percentage(time)float640.1322 0.1796 ... 0.9699 0.2326array([0.132232, 0.179595, 0.340984, 0.291771, 0.195772, 2.000013,\n       0.96991 , 0.232552])view:sun_azimuth(time)float64158.9 158.5 162.7 ... 165.2 166.8array([158.91324506, 158.50630661, 162.6663807 , 157.84964052,\n       157.99361406, 159.43576449, 165.15376613, 166.81057205])updated(time)&lt;U24'2022-11-06T13:16:38.195Z' ... '...array(['2022-11-06T13:16:38.195Z', '2022-11-06T12:52:50.337Z',\n       '2022-11-06T12:55:07.931Z', '2022-11-06T12:54:05.312Z',\n       '2022-11-06T13:14:37.621Z', '2022-11-06T13:12:58.202Z',\n       '2022-11-06T12:53:48.090Z', '2022-11-06T13:14:57.270Z'],\n      dtype='&lt;U24')platform(time)&lt;U11'sentinel-2b' ... 'sentinel-2a'array(['sentinel-2b', 'sentinel-2a', 'sentinel-2a', 'sentinel-2a',\n       'sentinel-2b', 'sentinel-2a', 'sentinel-2a', 'sentinel-2a'],\n      dtype='&lt;U11')proj:epsg()int3232633array(32633)view:sun_elevation(time)float6459.41 59.34 59.71 ... 50.17 46.97array([59.4067386 , 59.33648111, 59.7142557 , 57.43426893, 56.58894221,\n       53.33325433, 50.17160714, 46.96899755])s2:datastrip_id(time)&lt;U64'S2B_OPER_MSI_L2A_DS_2BPS_202206...array(['S2B_OPER_MSI_L2A_DS_2BPS_20220619T114329_S20220619T100031_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220624T143914_S20220624T100039_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220627T162810_S20220627T100933_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220714T175057_S20220714T100046_N04.00',\n       'S2B_OPER_MSI_L2A_DS_2BPS_20220719T113943_S20220719T095747_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220803T135155_S20220803T100037_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220816T162557_S20220816T100922_N04.00',\n       'S2A_OPER_MSI_L2A_DS_ATOS_20220826T162059_S20220826T100933_N04.00'],\n      dtype='&lt;U64')s2:medium_proba_clouds_percentage(time)float640.05143 0.001297 ... 2.271 0.00172array([5.143000e-02, 1.297000e-03, 7.322780e-01, 1.287753e+00,\n       7.000000e-05, 5.689905e+00, 2.270966e+00, 1.720000e-03])s2:saturated_defective_pixel_percentage()int320array(0)s2:water_percentage(time)float641.067 1.266 ... 0.7679 0.7824array([1.066825, 1.266303, 0.75182 , 1.253815, 1.263951, 1.116363,\n       0.767899, 0.782386])gsd(band)object10 10 10 10 Nonearray([10, 10, 10, 10, None], dtype=object)raster:bands(band)object{'nodata': 0, 'data_type': 'uint...array([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint8', 'spatial_resolution': 20}],\n      dtype=object)title(band)&lt;U30'Red (band 4) - 10m' ... 'Scene ...array(['Red (band 4) - 10m', 'Green (band 3) - 10m',\n       'Blue (band 2) - 10m', 'NIR 1 (band 8) - 10m',\n       'Scene classification map (SCL)'], dtype='&lt;U30')common_name(band)object'red' 'green' 'blue' 'nir' Nonearray(['red', 'green', 'blue', 'nir', None], dtype=object)center_wavelength(band)object0.665 0.56 0.49 0.842 Nonearray([0.665, 0.56, 0.49, 0.842, None], dtype=object)full_width_half_max(band)object0.038 0.045 0.098 0.145 Nonearray([0.038, 0.045, 0.098, 0.145, None], dtype=object)epsg()int3232633array(32633)Indexes: (4)timePandasIndexPandasIndex(DatetimeIndex(['2022-06-19 10:06:08.087000', '2022-06-24 10:06:16.177000',\n               '2022-06-27 10:16:12.822000', '2022-07-14 10:06:16.331000',\n               '2022-07-19 10:06:08.645000', '2022-08-03 10:06:14.409000',\n               '2022-08-16 10:16:12.609000', '2022-08-26 10:16:12.680000'],\n              dtype='datetime64[ns]', name='time', freq=None))bandPandasIndexPandasIndex(Index(['red', 'green', 'blue', 'nir', 'scl'], dtype='object', name='band'))xPandasIndexPandasIndex(Index([619000.0, 619200.0, 619400.0, 619600.0, 619800.0, 620000.0, 620200.0,\n       620400.0, 620600.0, 620800.0,\n       ...\n       645600.0, 645800.0, 646000.0, 646200.0, 646400.0, 646600.0, 646800.0,\n       647000.0, 647200.0, 647400.0],\n      dtype='float64', name='x', length=143))yPandasIndexPandasIndex(Index([5823000.0, 5822800.0, 5822600.0, 5822400.0, 5822200.0, 5822000.0,\n       5821800.0, 5821600.0, 5821400.0, 5821200.0,\n       ...\n       5797000.0, 5796800.0, 5796600.0, 5796400.0, 5796200.0, 5796000.0,\n       5795800.0, 5795600.0, 5795400.0, 5795200.0],\n      dtype='float64', name='y', length=140))Attributes: (4)spec :RasterSpec(epsg=32633, bounds=(619000, 5795000, 647600, 5823000), resolutions_xy=(200, 200))crs :epsg:32633transform :| 200.00, 0.00, 619000.00|\n| 0.00,-200.00, 5823000.00|\n| 0.00, 0.00, 1.00|resolution :200\n\n\n\n\n\nassets = c(\"red\",\"green\",\"blue\",\"nir\",\"scl\")\ncol = stac_image_collection(items$features, asset_names = assets)\nextent = list(\n  t0 = time_extent[1], t1 = time_extent[2],\n  left = bbox[\"xmin\"], bottom = bbox[\"ymin\"], \n  right = bbox[\"xmax\"], top = bbox[\"ymax\"]\n)\nview = cube_view(\n  srs = \"epsg:32633\",  \n  extent = extent,\n  dx = 200, dy = 200, dt = \"P1D\",\n  aggregation = \"median\",\n  resampling = \"bilinear\"\n)\ns2_mask = image_mask(\"scl\", values = c(3,8,9))\ncube = raster_cube(col, view, mask = s2_mask)\ncube\n\nA data cube proxy object\n\nDimensions:\n               low             high count pixel_size chunk_size\nt       2022-05-01       2022-10-01   154        P1D          1\ny 5795085.08512264 5822885.08512264   139        200        128\nx 619173.072575812 647573.072575812   142        200        128\n\nBands:\n   name offset scale nodata unit\n1  blue      0     1    NaN     \n2 green      0     1    NaN     \n3   nir      0     1    NaN     \n4   red      0     1    NaN     \n5   scl      0     1    NaN     \n\n\n\n\n\nAnd now we have a data cube! Let’s so a simple reduction over time of our data to view an RGB composite.\n\nPythonR\n\n\n\nrgb = cube.sel(band=[\"red\", \"green\", \"blue\"]).median(\"time\", keep_attrs=True)\nrgb = rgb.compute()\nrgb.plot.imshow(\n    rgb=\"band\",\n    robust=True\n)\n\n\n\n\n\n\n\ngdalcubes_options(parallel = 4, cache = TRUE) \nrgb = cube |&gt; \n    select_bands(c(\"blue\",\"green\",\"red\")) |&gt; \n    reduce_time(c(\"median(blue)\", \"median(green)\", \"median(red)\")) \nrgb |&gt; \n    plot(rgb = 3:1) \n\n\n\n\n\n\n\nAnd there we have it, a side by side how-to create on-demand STAC data cubes. If you want to get more functionalities and examples on what can be done with the packages please refer to the materials of my lecture: Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python.\nHappy STACing!\n\n\n\n\n\nReferences\n\nAppel, Marius, Edzer Pebesma, and Matthias Mohr. 2021. “Cloud-Based Processing of Satellite Image Collections in r Using STAC, COGs, and on-Demand Data Cubes.” 2021. https://r-spatial.org/r/2021/04/23/cloud-based-cubes.html.\n\n\nDuckworth, Jon. 2021. “STAC Python Client.” 2021. https://pystac-client.readthedocs.io/en/stable/index.html.\n\n\nJoseph, Gabe. 2023. “Stackstac: Easier Cloud-Native Geoprocessing.” 2023. https://stackstac.readthedocs.io/en/latest/.\n\n\nNavarro, Danielle. 2022. “Porting a Distill Blog to Quarto.” April 20, 2022. https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto.\n\n\nNowosad, Jakub. 2023. “Sharing Your Geospatial Knowledge in the Open.” 2023. https://www.youtube.com/watch?v=AUt-GOZJQaY&ab_channel=TomislavHengl%28OpenGeoHubFoundation%29.\n\n\nSimoes, Rolf, Felipe Souza, Matheus Zaglia, Gilberto Ribeiro Queiroz, Rafael Santos, and Karine Ferreira. 2021. “Rstac: An r Package to Access Spatiotemporal Asset Catalog Satellite Imagery.” In 2021 IEEE International Geoscience and Remote Sensing Symposium IGARSS, 7674–77. https://doi.org/10.1109/IGARSS47720.2021.9553518.\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{abad2023,\n  author = {Abad, Lorena},\n  title = {STAC Across {Languages}},\n  date = {2023-10-18},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAbad, Lorena. 2023. “STAC Across Languages.” October 18,\n2023."
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations and Workshops",
    "section": "",
    "text": "Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python. 31-08-2023. OpenGeoHub Summer School Poznan 2023, Poznan, Poland. Material | Video Part 1 | Video Part 2\nOpen data and open science for risk, hazard and climate assessments. 30-08-2023. discussion Forum “What can R, Python, and Julia development communities do to combat the climate crisis?”. OpenGeoHub Summer School Poznan 2023, Poznan, Poland. Video"
  },
  {
    "objectID": "presentations.html#section-3",
    "href": "presentations.html#section-3",
    "title": "Presentations and Workshops",
    "section": "2020",
    "text": "2020\nMapping and monitoring landslide-dammed lakes in Kaikōura, New Zealand using the Google Earth Engine. 21-10-2020. Geo For Good User Summit 2020 - Public Sector Meetup (online). Slides | Poster | Video\nTidy Geospatial Networks in R: Introducing the sfnetworks package. 16-06-2020. e-Rum2020 statellite event: Hackathon on Spatial Networks, (online). Slides | Video\nMapping and monitoring of landslide-dammed lakes using Sentinel-2 time series. 07-05-2020. EGU General Assembly 2020, Vienna, Austria (online). Abstract | Slides\nEl rol de las tecnologías geoespaciales para el mapeo y monitoreo de peligros naturales. 19-09-2020, Voces de la Ingeniería Ambiental, Cuenca, Ecuador (online). Slides | Video"
  },
  {
    "objectID": "presentations.html#section-2",
    "href": "presentations.html#section-2",
    "title": "Presentations and Workshops",
    "section": "2021",
    "text": "2021\nReproducible spatial data visualization with R. R-Spatial Panel. 30-09-2021. FOSS4G 2021, Buenos Aires, Argentina (online). Slides | Video\nRoad Construction and Rainfall as Landslide Triggers in the Rio Lucma Catchment, Eastern Cordillera Blanca, Peru. 29-04-2021. EGU General Assembly 2021, Vienna, Austria (online). Abstract | Slides\nIntroducción al paquete sfnetworks: Análisis de redes geoespaciales con R. 15-01-2021. R-Espacial en Español, (online). Slides | Video"
  },
  {
    "objectID": "presentations.html#section-1",
    "href": "presentations.html#section-1",
    "title": "Presentations and Workshops",
    "section": "2022",
    "text": "2022\nMass movement susceptibility assessment of alpine infrastructure in the Salzkammergut area, Austria. 18-10-2022. Landslide Scientific Assessment Conference: Landslide hazard, (online). Video\nSliDEM: An open-source-based workflow for DEM generation from Sentinel-1 for landslide volume estimation.26-08-2022. FOSS4G 2022 - Workshop. Florence, Italy. Slides\nsfnetworks: Tidy Geospatial Networks in R. 22-08-2022. FOSS4G 2022 - Workshop. Florence, Italy. Slides\nAnálisis de redes espaciales con sfnetworks. 17-08-2022. OceanHackWeek 2022 (online). Slides | Video\nAnálisis de redes espaciales con sfnetworks. 08-06-2022. R-Ladies Guayaquil Meetup. Guayaquil, Ecuador (online). Slides | Video\nAn open-source Python package for DEM generation and landslide volume estimation based on Sentinel-1 imagery. 24-05-2022. EGU General Assembly 2022, Vienna, Austria (online). Abstract | Slides"
  },
  {
    "objectID": "presentations.html#section-4",
    "href": "presentations.html#section-4",
    "title": "Presentations and Workshops",
    "section": "2019",
    "text": "2019"
  },
  {
    "objectID": "presentations.html#section",
    "href": "presentations.html#section",
    "title": "Presentations and Workshops",
    "section": "",
    "text": "Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python. 31-08-2023. OpenGeoHub Summer School Poznan 2023, Poznan, Poland. Material | Video Part 1 | Video Part 2\nOpen data and open science for risk, hazard and climate assessments. 30-08-2023. discussion Forum “What can R, Python, and Julia development communities do to combat the climate crisis?”. OpenGeoHub Summer School Poznan 2023, Poznan, Poland. Video"
  }
]