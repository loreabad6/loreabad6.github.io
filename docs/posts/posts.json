[
  {
    "path": "posts/2021-11-30-30daymapchallenge-rstats/",
    "title": "#30DayMapChallenge & #RStats",
    "description": "Day 30: Metamapping day",
    "author": [
      {
        "name": "Lorena Abad",
        "url": {}
      }
    ],
    "date": "2021-11-30",
    "categories": [
      "r-spatial",
      "dataviz",
      "30daymapchallenge",
      "rstats"
    ],
    "contents": "\r\n\r\nContents\r\nThe challenge\r\nCode-driven maps\r\nMetamapping my challenge\r\nMost used R packages\r\nHonorable mentions\r\n\r\nWrap-up\r\n\r\nThe challenge\r\nSince 2019, the #30DayMapChallenge by Topi Tjukanov has brought map geeks together for a month to flood our Twitter feeds with mind-blowing maps.\r\nThis year, I decided to participate by making maps with R! I had a lot of fun, but it was also quite a journey. I chose as an overarching topic my home country: Ecuador. I posted each of the maps on Twitter, and these two are the ones that received most attention:\r\n\r\n\r\n\r\n#30DayMapChallenge Day 10: RasterI am usually asked how hot my country is, and I usually say, not as hot as you may think! Worldclim data is a wonderful source for #dataviz#RStats #rspatial pic.twitter.com/Fgurk6du09\r\n\r\n‚Äî Lorena Abad (@loreabad6) November 11, 2021\r\n\r\n\r\n\r\n#30DayMapChallenge Day 24: HistoricalHumboldt's travels through the AmericasI have been fascinated with this scientist and since I read The Invention of Nature by @andrea_wulf I wanted to learn more and more!#RStats #RSpatial pic.twitter.com/J5yPUqZtFY\r\n\r\n‚Äî Lorena Abad (@loreabad6) November 24, 2021\r\n\r\n\r\nMy personal favorite, however, is day 13. I live away from home and so many other Ecuadorians do. It was amazing to see where we all are, and how ‚Äúfar-away‚Äù time wise each of us is from calling our loved ones.\r\n\r\n\r\n\r\n#30DayMapChallenge Day 13: NaturalEarth data challengeWhat is a good time to call home? Timezones are a hard thing to get used to when away from home. Here is a helpful map for all those Ecuadorians living abroad. #RStats #RSpatial pic.twitter.com/i54824zsrx\r\n\r\n‚Äî Lorena Abad (@loreabad6) November 15, 2021\r\n\r\n\r\nYou can see my complete gallery on this GitHub repository. This post is meant to show the back-end of these maps, so here we go!\r\nCode-driven maps\r\nI get a certain satisfaction of generating maps with code. To know that a bunch of commands can result in pretty figures is not only rewarding but also helpful. The certainty that I can always go back to a piece of code to re-generate a certain plot is the peak of reproducible data visualization.\r\nDon‚Äôt get me wrong, GUIs are great and have many advantages, like not taking 30 minutes to figure out the best coordinates for your labels. But it is that nice feeling of seeing a map somewhere and thinking: How did this person do that? Which tools/packages did they use? Did they go through crazy workarounds to get that effect?; and then actually being able to scan the building blocks of that map and answer those questions and test those effects for yourself, that makes the difference for me.\r\nOf course, this can only happen when code is shared. I personally love R‚Äôs capabilities for creating nice maps/figures and I myself used only R for this challenge (except for Day 15: map without a computer).\r\nMany other mappers used R for their challenge as well. Here are some of the GitHub repositories and Gists I found, that used R for their challenge:\r\nrichardvogg | gkaramanis | schochastics | shandiya | dakvid | leeolney3 | tashapiro | bydata\r\nI don‚Äôt mean this in any way as a comprehensive list, but just a sample of all the creative code out there during this edition of the challenge. For some further examples check David Frigge‚Äôs awesome gallery!\r\nMetamapping my challenge\r\nThe final day of the challenge is metamapping day. According to the details one can:\r\n\r\nSpend the day either by 1) collecting your entries from the challenge to a common gallery, 2) writing a tutorial or a blog post on one of your maps or 3) create a map from a theme you have chosen yourself\r\n\r\nWell, I decided to derail a bit and write a meta blog post for all the maps I created with R. In my tweets I always tried to include the packages I used for the day, however, I used so many for this challenge, that I thought they deserved some extra love. Some packages I already knew by heart (all their ins-and-outs and awesome capabilities), but others I discovered just because of this challenge and that was pretty cool. So, I chose for Day 30 to do a simple analysis of the packages I used.\r\nMy first task was to collect all the packages from my 28 R scripts. I was bracing myself either to writing my own function that would find all my library() calls, or to do some manual check of each. Luckily, renv came to my rescue. Did you know you can scan all the packages your project depends on? This was exactly what I needed, so with one line:\r\nrenv::dependencies()\r\nI managed to get all of the packages I used, per script. Next tasks: summarize by number of times I called each package, and assign them a category. You can see the code I used here.\r\nThe final result? The packages I used for each of my self-assigned categories and how many times I used them:\r\n\r\n\r\n\r\nInsights:\r\nTotal number of packages used: 5Ô∏è‚É£9Ô∏è‚É£\r\nThere was not one package that was used every day of the challenge ü§Ø\r\nNatural Earth was very frequently a data source, given that it is my go-to package to get country polygons üòÅ\r\nWant to work with fonts on Windows? extrafont is your package! üòâ\r\nI limited my interactive mapping quite strictly to the set day üòÖ\r\nMost used R packages\r\nsf\r\n\r\n\r\n\r\nTake a look again at the plot above, which package stands out the most? Beautiful sf! Simple features came here to stay and I am very glad it exists. Working with spatial data in R has never been easier, and that is because of this awesome package. I used it to read spatial data into R, to work with projections and to perform spatial analyses like joins, generating random spatial points, etc.\r\ndplyr\r\n\r\n\r\n\r\nThe tidyverse has made working with data in R extremely intuitive. Being able to work with structured data frames brings data science to a new level. dplyr is the first tidyverse package I learnt and I use it constantly for tasks as filtering, selecting, mutating, etc.\r\nggplot2\r\n\r\n\r\n\r\nAnother package of the tidyverse is ggplot2, which introduces the grammar of graphics into R and is extremely powerful to create awesome visualizations. Two main functions allow you to combine this package with spatial data: geom_sf() and geom_stars(). One interesting tip, if you learn to use coord_sf(), you can do things like assigning a CRS to your plot, although your data has a different projection, as coord_sf(crs =\"+proj=geos\")\r\nThis are the ggplot extensions I use the most:\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#otwakrzyph .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#otwakrzyph .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#otwakrzyph .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#otwakrzyph .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#otwakrzyph .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#otwakrzyph .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#otwakrzyph .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#otwakrzyph .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#otwakrzyph .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#otwakrzyph .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#otwakrzyph .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#otwakrzyph .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#otwakrzyph .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#otwakrzyph .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#otwakrzyph .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#otwakrzyph .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#otwakrzyph .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#otwakrzyph .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#otwakrzyph .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#otwakrzyph .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#otwakrzyph .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#otwakrzyph .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#otwakrzyph .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#otwakrzyph .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#otwakrzyph .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#otwakrzyph .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#otwakrzyph .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nggfx\r\n\r\nTo give shading and glow effects to spatial features\r\nggtext\r\n\r\nTo add special formatting to text\r\ngganimate\r\n\r\nTo animate the plots\r\nggspatial\r\n\r\nTo add north arrows and spatial scales\r\nggnewscale\r\n\r\nTo map multiple variables to the fill/color aesthetics\r\nggimage\r\n\r\nTo add images in spatial locations or as annotations\r\nggrepel\r\n\r\nTo automatically place overlapping labels\r\n\r\n\r\nosmdata\r\n\r\n\r\n\r\nThis package is simply the easiest way I have come across in R to query OpenStreetMap data. I use it very often when I need to get data for small areas. For larger areas, for example a whole country, I use osmextract.\r\ntmap\r\n\r\n\r\n\r\nWant to plot spatial features fast and easy, static and interactive? Use tmap! I use this package a lot for my scientific publications because it allows you to use raster RGB images and vector data really easy. To get a bit more creative it has some limitations, and that is why I did not use it as often as ggplot2 on this challenge. But, one of the main features I like about this one is the ability to call tm_facets() and get individual plots of features grouped by a category, and let scales x and y be free. This is not possible with ggplot2. See that in action on Day 22: Boundaries.\r\nNote: This hex logo is not official yet but I love it! Waiting eagerly for version 4 of tmap to launch this nice logo and many new features!\r\nscico\r\n\r\n\r\n\r\nFabio Crameri provided the whole scientific community a great set of scientific color palettes to fairly represent data that is universaly readable! scico allows you to use the palettes in R. Another great source of palettes is viridis, which is already easily accessible in ggplot2 with scale_*_viridis_*().\r\nstars\r\nstars really needs a hex logo üôè\r\nSpatiotemporal Arrays, Raster and Vector Data Cubes are handled neatly with stars. For anything raster or netcdf related this is my go-to package. It might be a bit complex to start with this package, but it is definitely worth it.\r\nOther options to work with raster data are raster and terra form the rspatial universe, which I actually use when I need to create hillshades from elevation data.\r\nHonorable mentions\r\nAlthough not on the top 7 above, there are some packages that I use frequently, but were not so used for this challenge. There are also really cool packages that I only discovered in the past month. Here is a table of how I used them:\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#jxjnkupoxm .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#jxjnkupoxm .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#jxjnkupoxm .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#jxjnkupoxm .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#jxjnkupoxm .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#jxjnkupoxm .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#jxjnkupoxm .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#jxjnkupoxm .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#jxjnkupoxm .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#jxjnkupoxm .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#jxjnkupoxm .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#jxjnkupoxm .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#jxjnkupoxm .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#jxjnkupoxm .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#jxjnkupoxm .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#jxjnkupoxm .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#jxjnkupoxm .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#jxjnkupoxm .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#jxjnkupoxm .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#jxjnkupoxm .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#jxjnkupoxm .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#jxjnkupoxm .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#jxjnkupoxm .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#jxjnkupoxm .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#jxjnkupoxm .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#jxjnkupoxm .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#jxjnkupoxm .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nsfnetworks\r\n\r\nOK, I am biased here, but have you checked out sfnetworks yet? Well, if you work with spatial networks you should. I used it to compute travel time using public transport in Quito for Day 9: Monochrome\r\n\r\nrgee\r\n\r\nDo you work with Google Earth Engine? Do you want to do that via R? Then use rgee. I use it to extract RGB thumbnails of Sentinel-2 imagery. See the RGB collection for Day 6, Day 7 and Day 8\r\n\r\nrayshader\r\n\r\nFor Day 11: 3D I could not use any other package than rayshader. 3D rendering can get so creative with this package\r\n\r\nhaven\r\n\r\nOpen data can come in so many formats and with so many extensions. When I first saw a .dta or a .sav file I thought, OK now what? Luckily, haven was just there ready made for these cases!\r\n\r\nggpomological\r\n\r\nFor Day 24: Historical I wanted to make a map with an old-style look. And there it was: ggpomological! I was very happy to run into this package\r\n\r\ngggibbous\r\n\r\nI had seen moon plots in other dataviz projects before but had never tried them myself. For Day 19: Island(s) I finally got the chance!\r\n\r\nbiscale\r\n\r\nI remember I made some bivariate choropleth maps once and it required a lot of code to achieve. biscale made it easy! I really wanted to flip the legend, and I managed so if you are interested, code is there. Featured on Day 26: Choropleth\r\n\r\nleaftime & leaflet\r\n\r\nI normally handle my interactive maps with tmap or mapview, but this time I stubbornly wanted a time slider for my Day 25: Interactive map, hence I ended up learning a lot on hot to use leaflet and its addons\r\n\r\n\r\n\r\nWrap-up\r\nWith this challenge I wanted to show how flexible R is to generate beautiful reproducible maps. Maybe mine are not the best examples but there are so many awesome contributions out there! I hope this post helps anyone who wants to use R for spatial data visualization to point them to good resources.\r\nThis was my first #30DayMapChallenge, it was exciting to think of new topics every day but frustrating when Ecuador‚Äôs open data repositories either had their servers down or chose to share the data only as WMS or with no metadata. I know this does not happen only for Ecuador, as Sanna Jokela explained on her tweet for one of her contributions.\r\n\r\n\r\n\r\nThis a perfect example on how NOT to do a map in #30DayMapChallenge: do not get an idea before the data, because the everything goes √•t helvete. Although it SHOULD be the otherway around! This is the reason to open data. You never know who you are enabling to do a better job.\r\n\r\n‚Äî Sanna Jokela (@SannaJokela1) November 24, 2021\r\n\r\n\r\nI cannot think of a better way to end this challenge. Thanks to anyone who followed my map making for 30 days, and sorry to those who follow me and were annoyed of having so many maps on your feed!\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-11-30T19:38:41+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-18-foss4grspatial/",
    "title": "FOSS4G: R-Spatial Panel",
    "description": "I was invited to an R-Spatial Panel!",
    "author": [
      {
        "name": "Lorena Abad",
        "url": {}
      }
    ],
    "date": "2021-11-18",
    "categories": [
      "r-spatial",
      "dataviz",
      "talks",
      "foss4g"
    ],
    "contents": "\r\n\r\nContents\r\nFOSS4G-2021\r\nMy presentation\r\nThe panel discussion\r\n\r\nFOSS4G-2021\r\nI attended my first FOSS4G conference this year and I really loved it! The team in Buenos Aires excelled at organizing this conference, even if we could not really go to Argentina, the online mode turned out to be an amazing experience.\r\nI was very happy to be able to be part of this conference not only as an attendee, but also as a panelist for the R-Spatial session. To be honest I felt quite overwhelmed initially when the invitation was extended. Being a panelist with all those big names in R-Spatial was an honor and also scary! Nevertheless, I said yes and do not regret it one single bit!\r\nMy presentation\r\nEach of the panelist had around 10 minutes for a short presentation. I decided to talk about ‚ÄúReproducible spatial data visualization with R‚Äù, where I showed how with 3 simple steps and a great pool of packages to choose from you can create nice spatial dataviz in R. See a glimpse below:\r\n\r\n\r\nYour browser does not support iframes.\r\n\r\n\r\nFull link to slides here.\r\nThe panel discussion\r\nDuring the panel, we discussed the role of R-Spatial as a new member of the OSGEO community. It was a very lively discussion, with most questions coming from the audience. Overall a great experience!\r\nHere is the video of the session:\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-11-18-foss4grspatial/figs/preview.png",
    "last_modified": "2021-11-24T12:36:18+01:00",
    "input_file": {},
    "preview_width": 1683,
    "preview_height": 1062
  },
  {
    "path": "posts/2021-03-05-geospatial-network-visualization/",
    "title": "Geospatial Network Visualization",
    "description": "{sfnetworks} meets {ggraph}",
    "author": [
      {
        "name": "Lorena Abad",
        "url": {}
      }
    ],
    "date": "2021-03-05",
    "categories": [
      "r-spatial",
      "dataviz",
      "networks"
    ],
    "contents": "\r\n\r\nContents\r\nWelcome to my website!\r\nWhat is this about?\r\nWhat can be done?\r\nThe Three Pillars\r\n1. layout_sf()\r\n2. geom_node_*()\r\n3. geom_edge_*()\r\n\r\nWhat can‚Äôt be done?\r\nShow me more!\r\n\r\n\r\n\r\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\r\n\r\nWelcome to my website!\r\nThis is the first entry for my brand new website built with distill. I hope you find this and hopefully the coming posts useful! So let‚Äôs get to it!\r\nWhat is this about?\r\n\r\n \r\n\r\nThis post is to document my personal exploration on how to visualize spatial networks created with sfnetworks using ggraph. This all started with a sfnetworks hackathon and should end with a successful pull request (PR) to ggraph.\r\nI should start by saying, that it is probably a good idea to get familiar with ggraph (and tidygraph and sfnetworks while you are at it!) before going through this post.\r\nIf you are already a ggraph + tidygraph user and would like to apply the possibilities to the spatial domain, then this is definitely a resource for you and a good opportunity to learn about sfnetworks!\r\nWhat can be done?\r\nThere are already several possibilities to use sfnetworks and ggraph together. Why? you may be wondering. Well because ggraph was built as a way to visualize tbl_graphs from tidygraph, and guess what? sfnetwork objects sub-classes tbl_graph. Let‚Äôs look at the roxel demo dataset from sfnetworks.\r\n\r\n\r\nlibrary(sfnetworks)\r\nlibrary(sf)\r\nnet = as_sfnetwork(roxel, directed = F)\r\nclass(net)\r\n\r\n\r\n[1] \"sfnetwork\" \"tbl_graph\" \"igraph\"   \r\n\r\nSo basically you can do all sort of crazy graph representations with an sfnetwork already.\r\nThe real aim of this integration is to allow you to do all this crazy graph representations + graph representations in geographical space! Not everything is possible yet, and you will see below some limitations.\r\nFor now I will illustrate how, with the current status quo, we can already integrate sfnetworks and ggraph for spatial network visualizations. So let‚Äôs get started!\r\nThe Three Pillars\r\nWe need to start with three main concepts, the essential elements to create any ggraph visualization:\r\n\r\n\r\n\r\nLayouts contain the vertical and horizontal placement of the nodes, giving them a physical placement. In spatial terms, they contain the coordinates of where each node should be mapped.\r\nNodes refer to which representation the nodes should have. And this really refers to which visual representation they should have, known in ggplot2 as geom. Should they be points, tiles, voronoi polygons? ggraph contains a large list of node representations via geom_node_*().\r\nEdges refer to the way nodes are connected between each other visually. Again here we are talking about ggplot2 geometries and the geom_edge_*() functions should give you a big pool of options to represent this.\r\nLet‚Äôs go through the possibilities to combine these elements with sfnetwork objects.\r\n1. layout_sf()\r\nAs mentioned before, a layout is basically the physical representation of where to place our nodes. When we are dealing with non-spatial network representations we must remember that the nodes are not meant to represent actual locations on Earth, but can be placed anywhere. ggraph provides several algorithms to make this happen. Let‚Äôs take one of the examples in the ggraph layout vignette to illustrate. This will include the layout + nodes + edges in a non-geographical representation.\r\n\r\n\r\nlibrary(ggraph)\r\nlibrary(tidygraph)\r\nlibrary(tidyverse)\r\nggraph(\r\n  filter(net, group_components() == 1), \r\n  layout = 'focus', \r\n  focus = node_is_center()\r\n) + \r\n  ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), data.frame(r = 1:5), colour = 'grey') + \r\n  geom_edge_link() + \r\n  geom_node_point() + \r\n  coord_fixed()\r\n\r\n\r\n\r\n\r\nBut when talking about geospatial networks, we would usually want to place the nodes in their geographical location. A really nice thing about ggraph, is that you can give your own customized layout, by passing custom X and Y coordinates for node placement!\r\nIn sfnetworks, we have a spatial network consisting of nodes and edges. Since we have a nice integration with sf, we can extract the coordinates of our nodes as an X and Y coordinate dataframe, which we can pass to ggraph. Let me give you a quick demo instead of all these words.\r\n\r\n\r\nnet\r\n\r\n\r\n# A sfnetwork with 701 nodes and 851 edges\r\n#\r\n# CRS:  EPSG:4326 \r\n#\r\n# An undirected multigraph with 14 components with spatially explicit edges\r\n#\r\n# Node Data:     701 x 1 (active)\r\n# Geometry type: POINT\r\n# Dimension:     XY\r\n# Bounding box:  xmin: 7.522622 ymin: 51.94151 xmax: 7.546705 ymax:\r\n#   51.9612\r\n             geometry\r\n          <POINT [¬∞]>\r\n1 (7.533722 51.95556)\r\n2 (7.533461 51.95576)\r\n3 (7.532442 51.95422)\r\n4  (7.53209 51.95328)\r\n5 (7.532709 51.95209)\r\n6 (7.532869 51.95257)\r\n# ... with 695 more rows\r\n#\r\n# Edge Data:     851 x 5\r\n# Geometry type: LINESTRING\r\n# Dimension:     XY\r\n# Bounding box:  xmin: 7.522594 ymin: 51.94151 xmax: 7.546705 ymax:\r\n#   51.9612\r\n   from    to name        type                                geometry\r\n  <int> <int> <chr>       <fct>                       <LINESTRING [¬∞]>\r\n1     1     2 Havixbecke~ reside~ (7.533722 51.95556, 7.533461 51.955~\r\n2     3     4 Pienersall~ second~ (7.532442 51.95422, 7.53236 51.9537~\r\n3     5     6 Schulte-Be~ reside~ (7.532709 51.95209, 7.532823 51.952~\r\n# ... with 848 more rows\r\n\r\n\r\nnet %>% st_coordinates() %>% head()\r\n\r\n\r\n         X        Y\r\n1 7.533722 51.95556\r\n2 7.533461 51.95576\r\n3 7.532442 51.95422\r\n4 7.532090 51.95328\r\n5 7.532709 51.95209\r\n6 7.532869 51.95257\r\n\r\nNow, how do we create a layout that extracts the coordinates automatically? Well here is a little helper function that will take care of that for you. It will extract the X and Y coordinates of any sfnetwork object into a data.frame that is understood by ggraph().\r\n\r\n\r\nlayout_sf = function(graph){\r\n  # Extract X and Y coordinates from the nodes\r\n  graph = activate(graph, \"nodes\")\r\n  x = sf::st_coordinates(graph)[,\"X\"]\r\n  y = sf::st_coordinates(graph)[,\"Y\"]\r\n  data.frame(x, y)\r\n}\r\n\r\n\r\n\r\nHow do we use it? Well, like this:\r\n\r\n\r\nlibrary(ggraph)\r\nggraph(net, layout = layout_sf)\r\n\r\n\r\n\r\n\r\nYes! That‚Äôs it. You are probably looking now at a beautiful blank canvas, but internally ggraph() has already a plan for every node you will map next, let‚Äôs see it in action in the next step.\r\n2. geom_node_*()\r\nThe most obvious way to represent a node in space is with a point. This is how we would do it if we were plotting POINT geometries in space. With ggraph we can get that representation with geom_node_point(). Note that other useful node representations in space might be using a label or text. We can achieve that with geom_node_label() and geom_node_text(), respectively.\r\nBuilding on our previous plot:\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point()\r\n\r\n\r\n\r\n\r\nOh yes, there are our nodes! But wait‚Ä¶ If you are familiar with the sfnetworks vignettes, you might be thinking: this looks distorted‚Ä¶ and yes, it does.\r\nUnfortunately, ggraph() does not know about coordinate reference systems (CRS) so it will accommodate your X and Y axes to the size of your plot. This is one of the reasons why some internal tweaks are needed in ggraph to make this work better. But for now a way to go around this is to use coord_sf():\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point() +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nMuch better. Now, our plot also takes into consideration the CRS and places our nodes properly.\r\nNow let‚Äôs give some aesthetics to our plot. If you scroll back up, you will see that our nodes don‚Äôt have attributes, other than their geometry, so what should we look at? What about the degree centrality of the node? This will calculate the number of incident edges for each of our nodes. We can do this with the centrality_degree() function in tidygraph.\r\nA really nice feature about ggraph is that we don‚Äôt need to go back to our original graph, mutate our network, save as a new object, and then call it again inside ggraph(). We can just call the function directly inside the aes(), where the calculation will be done on the fly! Read more about it here.\r\n\r\n\r\nlibrary(tidygraph)\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point(aes(color = centrality_degree())) +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nDirectly passing functions also works inside facet_*() functions. sfnetworks has a couple of functions that can be evaluated in this way. To illustrate we can use node_X(), which gives us the X coordinate of the nodes.\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point(aes(color = centrality_degree())) +\r\n  coord_sf(crs = st_crs(net)) +\r\n  facet_nodes(~node_X() > 7.535)\r\n\r\n\r\n\r\n\r\nOK, probably not a real-world case scenario, but it gives an overview of what can be done!\r\nLet‚Äôs move on to the final step, and connect these nodes to each other.\r\n3. geom_edge_*()\r\nNow comes the tricky part. When we are working with graph structures in, let‚Äôs call it, ‚Äúabstract‚Äù space, the connections between the nodes are basically straight lines between each from and to pair. Although ggraph has quite a long list to represent edges (see here), the connections that I find most relevant for spatial networks are geom_edge_link() and geom_edge_arc(), which create a straight line or an arc between connected nodes.\r\n\r\n\r\nggraph(net, layout_sf) +\r\n  geom_edge_arc() +\r\n  geom_node_point() +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nYes, I bet you are thinking this could go to accidental aRt. But depending on the visualization you are creating, this geom can come in handy for some data cases, you can see it in action at the end of this post!\r\nBut now let‚Äôs look at straight lines or links between our nodes. We can of course pass aesthetics to all the geom_edge_*() functions, which refer to edge attributes. Let‚Äôs color our edges by the type of road:\r\n\r\n\r\nggraph(net, layout_sf) +\r\n  geom_edge_link(aes(color = type)) +\r\n  geom_node_point(size = 0.75) +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nI know that for now you must be wondering: if we have a spatial set of edges with an explicit geometry, why are we just drawing plain lines? Well, remember I said this would be tricky? This is exactly what is missing from ggraph and the core of what I eventually want to implement.\r\nBut, do not despair! I am here to show you some workarounds, not fully ideal but something to work with in the meantime. Let‚Äôs remember that ggraph subclasses a ggplot object, so we can combine ggplot2 functions, and any other package that extends the grammar of graphics.\r\nWe will resort to geom_sf() for now. We can plot the edges of our network, by extracting them as an sf object with the function st_as_sf(). We have implemented a shortcut that allows you to choose which element of the network (nodes or edges), you want to activate and extract.\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(data = st_as_sf(net, \"edges\")) +\r\n  geom_node_point() +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nAnd there we go, a nice representation of a geospatial network! We can of course pass some aesthetics as well, for example an spatial edge predicate implemented in sfnetworks: edge_circuity(). You will see now that we can pass these predicates directly to the aesthetics inside geom_sf() and since our main object is a ggraph this expression will be evaluated in the network, pretty exciting!!\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(\r\n    data = st_as_sf(net, \"edges\"), size = 0.8,\r\n    aes(color = as.numeric(edge_circuity()))\r\n  ) +\r\n  scale_color_viridis(\"Circuity\") +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nAnd there you have it, a swift overview of how to use ggraph and sfnetworks together.\r\nWhat can‚Äôt be done?\r\nSo yes, a lot can be done already, but as you may have noticed, there are certain things that just don‚Äôt work yet with the current ggraph implementation. Here is a not at all comprehensive list of things that need some work:\r\nThe layout_sf() function I showed you above will not work when there are columns named x or y.\r\nggraph() does not consider the network CRS.\r\nThere is no way yet to plot spatially explicit edges inside ggraph.\r\nThis last one comes with a couple more problems:\r\nMultiple scales for the same aesthetic\r\nWith ggraph one can give ‚Äúcolor‚Äù, ‚Äúfill‚Äù, ‚Äúsize/width‚Äù, etc. aesthetics to both the nodes and the edges. In our current workaround this is not working so good. The plot will get rendered properly with the corresponding colors, but the legend does not know what to do, and will only use one of the scale elements, without a warning!\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(\r\n    data = st_as_sf(net, \"edges\"), \r\n    aes(color = as.numeric(edge_circuity()))\r\n  ) +\r\n  geom_node_point(\r\n    aes(color = centrality_betweenness())\r\n  ) +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nFaceting edges\r\nAnother missing stone is faceting by edges. This currently gives an error:\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(data = st_as_sf(net, \"edges\")) +\r\n  facet_edges(~type)\r\n\r\n\r\nError in seq_len(length(data) - 1): argument must be coercible to non-negative integer\r\n\r\nWhat to do then? Remember that I mention a PR? Well, I am working there to fix these issues, some of them already have a fix, others don‚Äôt. I would certainly appreciate any help I can get. I opened an issue to illustrate the progress of my PR. Basically I am stuck with understanding ggproto objects to allow an integration of edges in geographical space.\r\nIf you feel like exploring what I have got so far, install ggraph from my forked repo. Beware, this will replace the original ggraph, so do this under your own risk.\r\n\r\n\r\nremotes::install_github(\"loreabad6/ggraph\")\r\n\r\n\r\n\r\nShow me more!\r\nWhile testing my ggraph implementation, I started looking for some spatial network visualization examples done with R that I could recreate with my code. Here I added two examples of what I came up with, and will probably add more to this GitHub repository if you are interested in following it up. Bear in mind that most of these examples are created with remotes::install_github(\"loreabad6/ggraph\").\r\nBreak Free from Plastic\r\n\r\n\r\n\r\n\r\nFor week 5 of 2021 in the Tidy Tuesday weekly data project, we analyzed data from the ‚ÄúBreak Free from Plastic‚Äù initiative. Here is a step by step guide on how to recreate the final plot.\r\nAirports in the U.S.\r\n\r\n\r\n\r\n\r\nThis example is inspired on this wonderful blogpost on Network Visualization by Katherine Ognyanova, where I tried to recreate the last plot showing airport connections and visitors in the U.S. Here is the code to reproduce.\r\nThe fourth way of visualizing a graph on a map\r\n\r\n\r\n\r\n\r\nIn his very helpful blogpost, Markus Neteler guides us through three different ways to plot a spatial graph on a map. With the ggraph and sfnetworks combination, we can add a fourth way! Check here how to recreate this plot.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-03-05-geospatial-network-visualization/figs/preview.png",
    "last_modified": "2021-03-21T19:43:22+01:00",
    "input_file": {},
    "preview_width": 1536,
    "preview_height": 480
  }
]
