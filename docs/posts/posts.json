[
  {
    "path": "posts/2021-03-03-geospatial-network-visualization/",
    "title": "Geospatial Network Visualization",
    "description": "{sfnetworks} meets {ggraph}",
    "author": [
      {
        "name": "Lorena Abad",
        "url": {}
      }
    ],
    "date": "2021-03-03",
    "categories": [
      "r-spatial",
      "dataviz",
      "networks"
    ],
    "contents": "\r\n\r\nContents\r\nWhat is this about?\r\nWhat can be done?\r\nThe Three Pillars\r\n1. layout_sf()\r\n2. geom_node_*()\r\n3. geom_edge_*()\r\n\r\nWhat can’t be done?\r\nShow me more!\r\n\r\n\r\n\r\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\r\n\r\n\r\n \r\n\r\nWhat is this about?\r\nThis post is to document my personal exploration on how to visualize spatial networks created with sfnetworks using ggraph. This all started with a sfnetworks hackathon and should end with a successful pull request (PR) to ggraph.\r\nI should start by saying, that it is probably a good idea to get familiar with ggraph (and tidygraph and sfnetworks while you are at it!) before going through this post.\r\nIf you are already a ggraph + tidygraph user and would like to apply the possibilities to the spatial domain, then this is definitely a resource for you and a good opportunity to learn about sfnetworks!\r\nWhat can be done?\r\nThere are already several possibilities to use sfnetworks and ggraph together. Why? you may be wondering. Well because ggraph was built as a way to visualize tbl_graphs from tidygraph, and guess what? sfnetwork objects sub-classes tbl_graph. Let’s look at the roxel demo dataset from sfnetworks.\r\n\r\n\r\nlibrary(sfnetworks)\r\nlibrary(sf)\r\nnet = as_sfnetwork(roxel, directed = F)\r\nclass(net)\r\n\r\n\r\n[1] \"sfnetwork\" \"tbl_graph\" \"igraph\"   \r\n\r\nSo basically you can do all sort of crazy graph representations with an sfnetwork already.\r\nThe real aim of this integration is to allow you to do all this crazy graph representations + graph representations in geographical space! Not everything is possible yet, and you will see below some limitations.\r\nFor now I will illustrate how, with the current status quo, we can already integrate sfnetworks and ggraph for spatial network visualizations. So let’s get started!\r\nThe Three Pillars\r\nWe need to start with three main concepts, the essential elements to create any ggraph visualization:\r\n\r\n\r\n\r\nLayouts contain the vertical and horizontal placement of the nodes, giving them a physical placement. In spatial terms, they contain the coordinates of where each node should be mapped.\r\nNodes refer to which representation the nodes should have. And this really refers to which visual representation they should have, known in ggplot2 as geom. Should they be points, tiles, voronoi polygons? ggraph contains a large list of node representations via geom_node_*().\r\nEdges refer to the way nodes are connected between each other visually. Again here we are talking about ggplot2 geometries and the geom_edge_*() functions should give you a big pool of options to represent this.\r\nLet’s go through the possibilities to combine these elements with sfnetwork objects.\r\n1. layout_sf()\r\nAs mentioned before, a layout is basically the physical representation of where to place our nodes. When we are dealing with non-spatial network representations we must remember that the nodes are not meant to represent actual locations on Earth, but can be placed anywhere. ggraph provides several algorithms to make this happen. Let’s take one of the examples in the ggraph layout vignette to illustrate. This will include the layout + nodes + edges in a non-geographical representation.\r\n\r\n\r\nlibrary(ggraph)\r\nlibrary(tidygraph)\r\nlibrary(tidyverse)\r\nggraph(\r\n  filter(net, group_components() == 1), \r\n  layout = 'focus', \r\n  focus = node_is_center()\r\n) + \r\n  ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), data.frame(r = 1:5), colour = 'grey') + \r\n  geom_edge_link() + \r\n  geom_node_point() + \r\n  coord_fixed()\r\n\r\n\r\n\r\n\r\nBut when talking about geospatial networks, we would usually want to place the nodes in their geographical location. A really nice thing about ggraph, is that you can give your own customized layout, by passing custom X and Y coordinates for node placement!\r\nIn sfnetworks, we have a spatial network consisting of nodes and edges. Since we have a nice integration with sf, we can extract the coordinates of our nodes as an X and Y coordinate dataframe, which we can pass to ggraph. Let me give you a quick demo instead of all these words.\r\n\r\n\r\nnet\r\n\r\n\r\n# A sfnetwork with 701 nodes and 851 edges\r\n#\r\n# CRS:  EPSG:4326 \r\n#\r\n# An undirected multigraph with 14 components with spatially explicit edges\r\n#\r\n# Node Data:     701 x 1 (active)\r\n# Geometry type: POINT\r\n# Dimension:     XY\r\n# Bounding box:  xmin: 7.522622 ymin: 51.94151 xmax: 7.546705 ymax:\r\n#   51.9612\r\n             geometry\r\n          <POINT [°]>\r\n1 (7.533722 51.95556)\r\n2 (7.533461 51.95576)\r\n3 (7.532442 51.95422)\r\n4  (7.53209 51.95328)\r\n5 (7.532709 51.95209)\r\n6 (7.532869 51.95257)\r\n# ... with 695 more rows\r\n#\r\n# Edge Data:     851 x 5\r\n# Geometry type: LINESTRING\r\n# Dimension:     XY\r\n# Bounding box:  xmin: 7.522594 ymin: 51.94151 xmax: 7.546705 ymax:\r\n#   51.9612\r\n   from    to name        type                                geometry\r\n  <int> <int> <chr>       <fct>                       <LINESTRING [°]>\r\n1     1     2 Havixbecke~ reside~ (7.533722 51.95556, 7.533461 51.955~\r\n2     3     4 Pienersall~ second~ (7.532442 51.95422, 7.53236 51.9537~\r\n3     5     6 Schulte-Be~ reside~ (7.532709 51.95209, 7.532823 51.952~\r\n# ... with 848 more rows\r\n\r\n\r\nnet %>% st_coordinates() %>% head()\r\n\r\n\r\n         X        Y\r\n1 7.533722 51.95556\r\n2 7.533461 51.95576\r\n3 7.532442 51.95422\r\n4 7.532090 51.95328\r\n5 7.532709 51.95209\r\n6 7.532869 51.95257\r\n\r\nNow, how do we create a layout that extracts the coordinates automatically? Well here is a little helper function that will take care of that for you. It will extract the X and Y coordinates of any sfnetwork object into a data.frame that is understood by ggraph().\r\n\r\n\r\nlayout_sf = function(graph){\r\n  # Extract X and Y coordinates from the nodes\r\n  graph = activate(graph, \"nodes\")\r\n  x = sf::st_coordinates(graph)[,\"X\"]\r\n  y = sf::st_coordinates(graph)[,\"Y\"]\r\n  data.frame(x, y)\r\n}\r\n\r\n\r\n\r\nHow do we use it? Well, like this:\r\n\r\n\r\nlibrary(ggraph)\r\nggraph(net, layout = layout_sf)\r\n\r\n\r\n\r\n\r\nYes! That’s it. You are probably looking now at a beautiful blank canvas, but internally ggraph() has already a plan for every node you will map next, let’s see it in action in the next step.\r\n2. geom_node_*()\r\nThe most obvious way to represent a node in space is with a point. This is how we would do it if we were plotting POINT geometries in space. With ggraph we can get that representation with geom_node_point(). Note that other useful node representations in space might be using a label or text. We can achieve that with geom_node_label() and geom_node_text(), respectively.\r\nBuilding on our previous plot:\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point()\r\n\r\n\r\n\r\n\r\nOh yes, there are our nodes! But wait… If you are familiar with the sfnetworks vignettes, you might be thinking: this looks distorted… and yes, it does.\r\nUnfortunately, ggraph() does not know about coordinate reference systems (CRS) so it will accommodate your X and Y axes to the size of your plot. This is one of the reasons why some internal tweaks are needed in ggraph to make this work better. But for now a way to go around this is to use coord_sf():\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point() +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nMuch better. Now, our plot also takes into consideration the CRS and places our nodes properly.\r\nNow let’s give some aesthetics to our plot. If you scroll back up, you will see that our nodes don’t have attributes, other than their geometry, so what should we look at? What about the degree centrality of the node? This will calculate the number of incident edges for each of our nodes. We can do this with the centrality_degree() function in tidygraph.\r\nA really nice feature about ggraph is that we don’t need to go back to our original graph, mutate our network, save as a new object, and then call it again inside ggraph(). We can just call the function directly inside the aes(), where the calculation will be done on the fly! Read more about it here.\r\n\r\n\r\nlibrary(tidygraph)\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point(aes(color = centrality_degree())) +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nDirectly passing functions also works inside facet_*() functions. sfnetworks has a couple of functions that can be evaluated in this way. To illustrate we can use node_X(), which gives us the X coordinate of the nodes.\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_node_point(aes(color = centrality_degree())) +\r\n  coord_sf(crs = st_crs(net)) +\r\n  facet_nodes(~node_X() > 7.535)\r\n\r\n\r\n\r\n\r\nOK, probably not a real-world case scenario, but it gives an overview of what can be done!\r\nLet’s move on to the final step, and connect these nodes to each other.\r\n3. geom_edge_*()\r\nNow comes the tricky part. When we are working with graph structures in, let’s call it, “abstract” space, the connections between the nodes are basically straight lines between each from and to pair. Although ggraph has quite a long list to represent edges (see here), the connections that I find most relevant for spatial networks are geom_edge_link() and geom_edge_arc(), which create a straight line or an arc between connected nodes.\r\n\r\n\r\nggraph(net, layout_sf) +\r\n  geom_edge_arc() +\r\n  geom_node_point() +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nYes, I bet you are thinking this could go to accidental aRt. But depending on the visualization you are creating, this geom can come in handy for some data cases, you can see it in action at the end of this post!\r\nBut now let’s look at straight lines or links between our nodes. We can of course pass aesthetics to all the geom_edge_*() functions, which refer to edge attributes. Let’s color our edges by the type of road:\r\n\r\n\r\nggraph(net, layout_sf) +\r\n  geom_edge_link(aes(color = type)) +\r\n  geom_node_point(size = 0.75) +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nI know that for now you must be wondering: if we have a spatial set of edges with an explicit geometry, why are we just drawing plain lines? Well, remember I said this would be tricky? This is exactly what is missing from ggraph and the core of what I eventually want to implement.\r\nBut, do not despair! I am here to show you some workarounds, not fully ideal but something to work with in the meantime. Let’s remember that ggraph subclasses a ggplot object, so we can combine ggplot2 functions, and any other package that extends the grammar of graphics.\r\nWe will resort to geom_sf() for now. We can plot the edges of our network, by extracting them as an sf object with the function st_as_sf(). We have implemented a shortcut that allows you to choose which element of the network (nodes or edges), you want to activate and extract.\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(data = st_as_sf(net, \"edges\")) +\r\n  geom_node_point() +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nAnd there we go, a nice representation of a geospatial network! We can of course pass some aesthetics as well, for example an spatial edge predicate implemented in sfnetworks: edge_circuity(). You will see now that we can pass these predicates directly to the aesthetics inside geom_sf() and since our main object is a ggraph this expression will be evaluated in the network, pretty exciting!!\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(\r\n    data = st_as_sf(net, \"edges\"), size = 0.8,\r\n    aes(color = as.numeric(edge_circuity()))\r\n  ) +\r\n  scale_color_viridis(\"Circuity\") +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nAnd there you have it, a swift overview of how to use ggraph and sfnetworks together.\r\nWhat can’t be done?\r\nSo yes, a lot can be done already, but as you may have noticed, there are certain things that just don’t work yet with the current ggraph implementation. Here is a not at all comprehensive list of things that need some work:\r\nThe layout_sf() function I showed you above will not work when there are columns named x or y.\r\nggraph() does not consider the network CRS.\r\nThere is no way yet to plot spatially explicit edges inside ggraph.\r\nThis last one comes with a couple more problems:\r\nMultiple scales for the same aesthetic\r\nWith ggraph one can give “color”, “fill”, “size/width”, etc. aesthetics to both the nodes and the edges. In our current workaround this is not working so good. The plot will get rendered properly with the corresponding colors, but the legend does not know what to do, and will only use one of the scale elements, without a warning!\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(\r\n    data = st_as_sf(net, \"edges\"), \r\n    aes(color = as.numeric(edge_circuity()))\r\n  ) +\r\n  geom_node_point(\r\n    aes(color = centrality_betweenness())\r\n  ) +\r\n  coord_sf(crs = st_crs(net))\r\n\r\n\r\n\r\n\r\nFaceting edges\r\nAnother missing stone is faceting by edges. This currently gives an error:\r\n\r\n\r\nggraph(net, layout = layout_sf) +\r\n  geom_sf(data = st_as_sf(net, \"edges\")) +\r\n  facet_edges(~type)\r\n\r\n\r\nError in seq_len(length(data) - 1): argument must be coercible to non-negative integer\r\n\r\nWhat to do then? Remember that I mention a PR? Well, I am working there to fix these issues, some of them already have a fix, others don’t. I would certainly appreciate any help I can get. I opened an issue to illustrate the progress of my PR. Basically I am stuck with understanding ggproto objects to allow an integration of edges in geographical space.\r\nIf you feel like exploring what I have got so far, install ggraph from my forked repo. Beware, this will replace the original ggraph, so do this under your own risk.\r\n\r\n\r\nremotes::install_github(\"loreabad6/ggraph\")\r\n\r\n\r\n\r\nShow me more!\r\nWhile testing my ggraph implementation, I started looking for some spatial network visualization examples done with R that I could recreate with my code. Here I added two examples of what I came up with, and will probably add more to this GitHub repository if you are interested in following it up. Bear in mind that most of these examples are created with remotes::install_github(\"loreabad6/ggraph\").\r\nBreak Free from Plastic\r\n\r\n\r\n\r\n\r\nFor week 5 of 2021 in the Tidy Tuesday weekly data project, we analyzed data from the “Break Free from Plastic” initiative. Here is a step by step guide on how to recreate the final plot.\r\nAirports in the U.S.\r\n\r\n\r\n\r\n\r\nThis example is inspired on this wonderful blogpost on Network Visualization, where I tried to recreate the last plot showing airport connections and visitors in the U.S. Here is the code to reproduce.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-03-03-geospatial-network-visualization/geospatial-network-visualization_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-03-03T17:40:52+01:00",
    "input_file": "geospatial-network-visualization.utf8.md",
    "preview_width": 1536,
    "preview_height": 480
  }
]
