{
  "hash": "295c31b6f09650a118e4906d2eaeab62",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Let's cube those geoms!\"\ndescription: |\n  Vector data cubes for multidimensional data.\ndate: 14/10/2024\ndate-modified: last-modified\n# image: figs/thumbnail.png\ncategories:\n  - r-spatial\n  - rstats\nbibliography: https://api.citedrive.com/bib/618133a2-4856-443b-b778-a72d316eb599/references.bib?x=eyJpZCI6ICI2MTgxMzNhMi00ODU2LTQ0M2ItYjc3OC1hNzJkMzE2ZWI1OTkiLCAidXNlciI6ICIyNTY4IiwgInNpZ25hdHVyZSI6ICI4MWExNDU3ODE3NWUxMzFiZDI1NDliOTg2NmQzMWJjNzU4OWI4YjI3MDUxOTU5NDg3MDM5MzFlYmQwMDY0OThhIn0=/bibliography.bib\ndraft: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n# BEGIN seminar\n\nIf you are here, it is very likely you attended the [BEGIN seminar from the University of St. Andrews](https://begin.wp.st-andrews.ac.uk/activities-events/) today. Thank you for stopping by! üíê\n\nI was invited by Dr. Fernando Benitez (thank you so much for considering me!) to give a talk on a topic I am working on, so I decided to [talk about vector data cubes](https://begin.wp.st-andrews.ac.uk/2024/09/26/begin-seminar-dr-lorena-cristina-abad-crespo/) üòä.\nThis post compliments the talk by writing out what I discussed during the seminar and by providing the code to reproduce some of the work I showed. \n\nHere are the slides of my talk today:\n\n<iframe width=\"580\" height=\"400\" src=\"https://loreabad6.github.io/slides/slides-vdcs.html\" frameborder=\"0\">\n<p>Your browser does not support iframes.</p>\n</iframe>\n\nAnd over here I will load some of the libraries I use for the next sections.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cubble)\nlibrary(glue)\nlibrary(here)\nif(!require(post)) remotes::install_github(\"loreabad6/post\")\nlibrary(post)\nlibrary(sf)\nlibrary(stars)\nlibrary(tidyverse)\nlibrary(units)\n```\n:::\n\n\n\n# Data cubes\n\nData cubes are ideal data structures for multidimensional data. Think of data with spatiotemporal properties such as satellite image time series (SITS). If you work with SITS you might already be familiar with data cubes, as Earth system data cubes have received quite some attention lately [@Mahecha2020].\n\n::: column-margin\n![Earth system data cube \\| Source: @Mahecha2020](https://esd.copernicus.org/articles/11/201/2020/esd-11-201-2020-f03-web.png)\n:::\n\nTools and initiatives like [Google Earth Engine](https://earthengine.google.com/), [OpenEO](https://openeo.org/) and [Digital Earth Africa](https://www.digitalearthafrica.org/) are using data cubes as their core for SITS analysis.\n\nOrganizing SITS in data cubes is intuitive and logical given that satellite images have consistent X/Y coordinates per pixel, and any reacquisition over time keeps the same X/Y coordinates. Here we already identify three dimensions: `X`, `Y` and `time`. Satellite images also have bands and we can then consider those as a fourth dimension.\n\n![4D data cube \\| Source: @Pebesma_2023](figs/fig-cube4d-1.png)\n\n::: column-margin\nI wrote a post almost a year ago on how to create [on-demand data cubes with STAC with R and Python](https://loreabad6.github.io/posts/2023-10-17-stac-across-languages/).\n:::\n\n# Vector data cubes\n\nTo quote @Pebesma_2023 at the very start of the Data Cubes Chapter:\n\n> ‚ÄúData cubes arise naturally when we observe properties of a set of geometries repeatedly over time‚Äù.\n\nClearly satellite images for this description, being X and Y said ‚Äúgeometry‚Äù. But how other type of data like meteorological station data? They are also located in a X and Y location on Earth, represented by a `POINT` geometry. Stations collect data at constant time intervals, giving them a temporal dimension. Further, they can collect data on different type of phenomena, such as temperature, humidity, etc. So in essence, station data is multidimensional data that can be represented as a data cube. In this case, a *vector data cube* (VDCs).\n\n![Vector data cube \\| Source: @Pebesma_2023](figs/fig-aqdc-1.png)\n\n::: column-margin\nIf you are familiar with databases, you will find that the concept of a vector data cube aligns greatly with an [OLAP cube](https://en.wikipedia.org/wiki/OLAP_cube) model.\n:::\n\nAnother ‚Äúnaturally occurring‚Äù VDC case is when data from a raster or Earth system data cube is aggregated onto vector geometries. This vector geometries can be for example, political boundaries. The [`{stars}`](https://r-spatial.github.io/stars/index.html) package has a great example of aggregation of precipitation data over the North Carolina counties [right here](https://r-spatial.github.io/stars/index.html#raster-and-vector-time-series-analysis-example). This is a sneak peek:\n\n\n::: {.cell .column-page layout-ncol=\"2\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Load precipitation data\nprecipitation = system.file(\"nc/test_stageiv_xyt.nc\", package = \"stars\") |>\n    read_stars()\n# Load North Carolina data\nnc = system.file(\"gpkg/nc.gpkg\", package = \"sf\") |> \n  read_sf() |> \n  # Transform CRS to match precipitation data cube\n  st_transform(st_crs(precipitation))\n# Aggregate precipitation data over NC counties\nprecipitation_nc = aggregate(precipitation, by = nc, FUN = max)\n# Plot raster data cube\nggplot() +\n  geom_stars(data = precipitation[,,,1:9]) +\n  scale_fill_viridis_c(\"Precipitation [kg/m^2]\") +\n  geom_sf(data = nc, fill = NA, color = \"red\") +\n  facet_wrap(\"time\", ncol = 3) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![Precipitation raster data cube](index_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# Plot vector data cube\nggplot() +\n  geom_stars(\n    data = precipitation_nc[,,1:9]\n  ) +\n  geom_sf(data = nc, fill = NA, color = \"white\") +\n  scale_fill_viridis_c(\n    \"Precipitation [kg/m^2]\",\n    na.value = \"grey85\"\n  ) +\n  facet_wrap(~time, nrow = 3) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![Precipitation vector data cube aggregated by NC county](index_files/figure-html/unnamed-chunk-2-2.png){width=768}\n:::\n:::\n\n\n# Exploring VDCs with R\n\nIf you do a search for ‚Äúvector data cubes R‚Äù, it is very likely that your first result is the `{stars}` package. As its name says, `{stars}` supports ‚Äúspatiotemporal **arrays**, rasters, and vector data cubes‚Äù.\n\n::: column-margin\n`{stars}` pioneered vector data cube implementations in current spatial data science languages. Further efforts in Python with the package [`{xvec}`](https://xvec.readthedocs.io/en/stable/) are inspired by initial development in `{stars}`.\n:::\n\n`{stars}` takes advantage of base R‚Äôs support for matrices and arrays to implement common data cube operations such as slicing (filtering), reducing (aggregating), and applying functions to dimensions.\n\nTypically, data cubes are represented as multidimensional arrays given their capacity to support exactly that, multiple dimensions.\nHowever, when only looking at spatio-temporal data, I also use the [`{cubble}`](https://huizezhang-sherry.github.io/cubble/) package that implements \"a vector spatiotemporal data structure for data analysis\" [@Zhang_2022].\n\n`{stars}` and `{cubble}` interact very well when the data cube consists of space and time dimensions. \n\nTo showcase this interaction I will make use of some data from the [openSenseMap](https://opensensemap.org/) project and build what I call array and tabular data cubes.\n\n::: column-margin\n[openSenseMap.org](https://opensensemap.org/) has the vision to become *\"the Wikipedia for environmental data in order to awaken and promote education, environmental and climate protection, enthusiasm for STEM, citizen science, open data and open source.\"*\n\nYou can [donate to their cause here](https://opensensemap.org/donate).\n:::\n\n## Fetching the data\n\nThe openSenseMap project provides an API to query the information from the sensors shared on their website. \n\nI queried the API to obtain some data from sensors close to the city where I am based, Salzburg.\nYou can unfold the code below to see how I queried the API and pre-processed the data so that you know how to do this for other areas.\nHowever, I saved the result of the querying and pre-processing to avoid exhausting the API.\nThe data is corpyrighted as ¬© senseBox 2014 - 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n## parameters\nbboxsbg = glue_collapse(c(12,47.5,13.5,47.9), sep = \",\")\nfrom = \"2024-10-01T00:00:00Z\"\nto = \"2024-10-03T00:00:00Z\"\nop = \"arithmeticMean\"\nwin = \"1h\"\nformat = \"tidy\"\ncols = glue_collapse(c(\"boxId\",\"boxName\",\"lat\",\"lon\",\"phenomenon\",\"unit\"), sep = \",\")\n## api query\nquery = function(phenomenon) {\n  glue(\"https://api.opensensemap.org/statistics/descriptive?bbox={bboxsbg}&from-date={from}&to-date={to}&phenomenon={phenomenon}&operation={op}&columns={cols}&window={win}&format={format}\")\n}\n## fetch data\ntemperature = read_csv(query(\"Temperatur\"))\npm10 = read_csv(query(\"PM10\"))\npm25 = read_csv(query(\"PM2.5\"))\n## check if data is complete, if not, complete cases\ndim(temperature)\ndim(pm10)\ndim(pm25)\ntemperature_comp = temperature |> \n  complete(\n    nesting(boxName, lon, lat), time_start,\n    nesting(phenomenon, unit)\n)\n# merge data into one file and complete cases for all stations\nopensense = bind_rows(temperature_comp, pm10, pm25) |> \n  select(-sensorId, -boxId) |> \n  complete(\n    nesting(boxName, lon, lat, time_start),\n    nesting(phenomenon, unit)\n  ) |> \n  st_as_sf(coords = c(\"lon\", \"lat\")) |> \n  st_set_crs(4326)\n```\n:::\n\n\nTo read in the saved data, we can use the `{sf}` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(opensense = read_sf(\"data/opensensemap.gpkg\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1050 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 12.18844 ymin: 47.62055 xmax: 13.12862 ymax: 47.8726\nGeodetic CRS:  WGS 84\n# A tibble: 1,050 √ó 6\n   boxName   time_start          phenomenon unit  arithmeticMean_1h\n   <chr>     <dttm>              <chr>      <chr>             <dbl>\n 1 1188BRD16 2024-10-01 00:00:00 PM10       ¬µg/m¬≥             1.35 \n 2 1188BRD16 2024-10-01 00:00:00 PM2.5      ¬µg/m¬≥             0.754\n 3 1188BRD16 2024-10-01 00:00:00 Temperatur ¬∞C               NA    \n 4 1188BRD16 2024-10-01 01:00:00 PM10       ¬µg/m¬≥             1.60 \n 5 1188BRD16 2024-10-01 01:00:00 PM2.5      ¬µg/m¬≥             0.707\n 6 1188BRD16 2024-10-01 01:00:00 Temperatur ¬∞C               NA    \n 7 1188BRD16 2024-10-01 02:00:00 PM10       ¬µg/m¬≥             2.05 \n 8 1188BRD16 2024-10-01 02:00:00 PM2.5      ¬µg/m¬≥             0.885\n 9 1188BRD16 2024-10-01 02:00:00 Temperatur ¬∞C               NA    \n10 1188BRD16 2024-10-01 03:00:00 PM10       ¬µg/m¬≥             1.70 \n# ‚Ñπ 1,040 more rows\n# ‚Ñπ 1 more variable: geom <POINT [¬∞]>\n```\n\n\n:::\n:::\n\n\nAs you can notice, the data has several data duplicates, since it is presented in a long format. \nIn this way each row contains the station name (`boxName`), the timestamp (`time_start`) and the parameter measured (`phenomenon`). \nEach station also has a `POINT` geometry and each measurement has its corresponding unit. \n\nThe measured values (`arithmeticMean_1h`) are the only changing variables. \nThis value, as can be seen on the query code, is the arithmetic mean per hour of the observations for temperature, PM2.5 and PM10 for the sensors in the bounding box given.\nNot every sensor measures all the values and therefore there are `NA`s within the data. \n\n## Creating a VDC with `{stars}`\n\nAlthough creating a raster data cube from SITS data is pretty straightforward in `{stars}`, creating a VDC requires a bit more pre-processing.\n\nHowever, when creating a VDC from scratch we get to understand better how [`stars` objects are structured](https://r-spatial.github.io/stars/articles/stars4.html).\n\n> \"`{stars}` provides infrastructure for *data cubes*, array data with labeled dimensions\".\n\nSo, we start with the *dimensions*.\n\n> \"A `dimensions` object is a named list of dimension elements, each describing the semantics a dimension of the data arrays (space, time, type etc).\"\n\nFirst, we identify the dimensions in the `opensense` object.\nWe have a geometry (`geom`) that identifies and locates each station in space and we have a timestamp (`time_start`) that marks the temporal dimension.\nThe `point` parameter indicates if the dimension has point support (`point = TRUE` in the case of our `geom`) or if it is a period (`point = FALSE` in the case of our `time_start`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(d = st_dimensions(\n  geom = st_sfc(unique(opensense$geom), crs = st_crs(opensense)),\n  time = unique(opensense$time_start),\n  point = c(TRUE, FALSE)\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     from to         offset   delta  refsys point\ngeom    1  7             NA      NA  WGS 84  TRUE\ntime    1 50 2024-10-01 UTC 1 hours POSIXct FALSE\n                                                      values\ngeom POINT (12.91207 47.71819),...,POINT (12.45901 47.73125)\ntime                                                    NULL\n```\n\n\n:::\n:::\n\n\n<!-- add explanation on the dimensions object -->\n\nNow, let's focus on the *array data*. \n\n> \"stars objects consist of a (possibly empty) named list of arrays, each having named dimensions (`dim`) attribute\".\n\nTo create an array in R we need to establish the maximal indices in each dimension. \nAs we did above when building the `dimensions` object, we create now a vector with the dimensions in which we will arrange the array data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndims = c(\n  length(unique(opensense$boxName)),\n  length(unique(opensense$time_start))\n)\n```\n:::\n\n\nThe order in which the data is assigned to each element in an array is important. \nNormally, arrays are assigned in a per column basis. \nFor this, we order our data first by the last set dimension (time) and then by the first one (station geom).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopensense = opensense[order(opensense[[\"time_start\"]],opensense[[\"boxName\"]]), ]\n```\n:::\n\n\nAnd now we create the arrays to pass onto the `stars` object during creation. \nWe create one array per parameter.\nFor that we filter the data to the corresponding `phenomenon`.\nThen we extract the measured values and pass them onto the `array()` function, assigning the `dims` object created above. \nFinally, we pass the units to the array for each parameter.\n\n::: column-margin\nInstead of creating the three arrays, we can also create a third dimension for the parameters.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create temperature array\ntemp = filter(opensense, phenomenon == \"Temperatur\")\ntemp_arr = array(temp$arithmeticMean_1h, dim = dims)\nunits(temp_arr) = as_units(unique(temp$unit))\n# Create PM2.5 array\npm25 = filter(opensense, phenomenon == \"PM2.5\")\npm25_arr = array(pm25$arithmeticMean_1h, dim = dims)\nunits(pm25_arr) = as_units(unique(pm25$unit))\n# Create PM10 array\npm10 = filter(opensense, phenomenon == \"PM10\")\npm10_arr = array(pm10$arithmeticMean_1h, dim = dims)\nunits(pm10_arr) = as_units(unique(pm10$unit))\n```\n:::\n\n\nAnd with that, we can create our VDC using `{stars}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(opensense_stars = st_as_stars(\n  temperature = temp_arr,\n  `PM2.5` = pm25_arr,\n  PM10 = pm10_arr,\n  d\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nstars object with 2 dimensions and 3 attributes\nattribute(s):\n                       Min.    1st Qu.    Median     Mean   3rd Qu.      Max.\ntemperature [¬∞C] 6.65000000 12.7511667 15.514167 17.01426 21.291500  24.56083\nPM2.5 [¬µg/m¬≥]    0.04090909  0.6726201  1.324079 12.93712  4.611875  66.39458\nPM10 [¬µg/m¬≥]     0.04227273  1.1006522  2.612205 24.76510  8.095625 149.11708\n                 NA's\ntemperature [¬∞C]  101\nPM2.5 [¬µg/m¬≥]     100\nPM10 [¬µg/m¬≥]      100\ndimension(s):\n     from to         offset   delta  refsys point\ngeom    1  7             NA      NA  WGS 84  TRUE\ntime    1 50 2024-10-01 UTC 1 hours POSIXct FALSE\n                                                      values\ngeom POINT (12.91207 47.71819),...,POINT (12.45901 47.73125)\ntime                                                    NULL\n```\n\n\n:::\n:::\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\nplot(opensense_stars[\"PM10\",,1:9], pch = 16)\n```\n\n::: {.cell-output-display}\n![PM10 hourly measurements for openSenseMap stations.](index_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopensense_stars |> \n  drop_units() |> \n  merge(name = \"parameter\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nstars object with 3 dimensions and 1 attribute\nattribute(s):\n                              Min. 1st Qu.  Median     Mean 3rd Qu.     Max.\ntemperature.PM2.5.PM10  0.04090909   1.213 6.16875 18.24046  20.937 149.1171\n                        NA's\ntemperature.PM2.5.PM10   301\ndimension(s):\n          from to         offset   delta  refsys point\ngeom         1  7             NA      NA  WGS 84  TRUE\ntime         1 50 2024-10-01 UTC 1 hours POSIXct FALSE\nparameter    1  3             NA      NA      NA    NA\n                                                           values\ngeom      POINT (12.91207 47.71819),...,POINT (12.45901 47.73125)\ntime                                                         NULL\nparameter                   temperature, PM2.5      , PM10       \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopensense_daily = opensense_stars |> \n  aggregate(\"1 day\", mean, na.rm = TRUE)\n```\n:::\n\n::: {.cell .column-page}\n\n```{.r .cell-code  code-fold=\"true\"}\n# for some reason the aggregation step is not recognized \n# by geom_stars so I converted the stars object to a long \n# sf and used geom_sf instead\nggplot(drop_units(st_as_sf(opensense_daily, long = TRUE))) +\n  geom_sf(aes(color = temperature), size = 2) +\n  scale_color_viridis_c(\n    \"Mean temperature [¬∞C]\",\n    na.value = \"grey85\", option = \"inferno\"\n  ) +\n  facet_wrap(~time, ncol = 3) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![Daily mean temperature for openSenseMap stations.](index_files/figure-html/unnamed-chunk-13-1.png){width=1152}\n:::\n:::\n\n\n## Converting to `{cubble}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopensense_cubble = opensense_stars |> \n  as_cubble(key = id, index = time)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopensense_cubble |> face_spatial()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n‚Ñπ The cubble is already in the nested form\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# cubble:   key: id [7], index: time, nested form, [sf]\n# spatial:  [12.19, 47.62, 13.13, 47.87], WGS 84\n# temporal: time [dttm], temperature [[¬∞C]], PM2.5 [[¬µg/m¬≥]], PM10 [[¬µg/m¬≥]]\n     id  long   lat                geom ts               \n* <int> <dbl> <dbl>         <POINT [¬∞]> <list>           \n1     1  12.9  47.7 (12.91207 47.71819) <tibble [50 √ó 4]>\n2     2  12.2  47.6 (12.18844 47.62055) <tibble [50 √ó 4]>\n3     3  12.6  47.9 (12.64558 47.86673) <tibble [50 √ó 4]>\n4     4  13.0  47.8 (13.03966 47.82361) <tibble [50 √ó 4]>\n5     5  13.1  47.7 (13.12862 47.65276) <tibble [50 √ó 4]>\n6     6  13.0  47.9  (12.97138 47.8726) <tibble [50 √ó 4]>\n7     7  12.5  47.7 (12.45901 47.73125) <tibble [50 √ó 4]>\n```\n\n\n:::\n\n```{.r .cell-code}\nopensense_cubble |> face_temporal()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# cubble:   key: id [7], index: time, long form\n# temporal: 2024-10-01 -- 2024-10-03 01:00:00 [1h], no gaps\n# spatial:  long [dbl], lat [dbl], geom [POINT [¬∞]]\n      id time                temperature   PM2.5    PM10\n   <int> <dttm>                     [¬∞C] [¬µg/m¬≥] [¬µg/m¬≥]\n 1     1 2024-10-01 00:00:00          NA   0.754    1.35\n 2     1 2024-10-01 01:00:00          NA   0.707    1.60\n 3     1 2024-10-01 02:00:00          NA   0.885    2.05\n 4     1 2024-10-01 03:00:00          NA   0.841    1.70\n 5     1 2024-10-01 04:00:00          NA   0.878    1.57\n 6     1 2024-10-01 05:00:00          NA   0.8      1.61\n 7     1 2024-10-01 06:00:00          NA   1.79     3.87\n 8     1 2024-10-01 07:00:00          NA   1.15     3.41\n 9     1 2024-10-01 08:00:00          NA   1.09     2.44\n10     1 2024-10-01 09:00:00          NA   0.865    2.06\n# ‚Ñπ 340 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# bring back station names\nboxnames = select(opensense, boxName) |> distinct()\nopensense_cubble = opensense_cubble |> \n  st_join(boxnames) \n# unfold the necessary data in the temporal cube to plot\nopensense_unf = opensense_cubble |> \n  face_temporal() |> \n  unfold(boxName, long, lat) |> \n  drop_units()\n# glyph plot\nggplot(opensense_unf) +\n  aes(x_major = long, x_minor = time, \n      y_major = lat, y_minor = `PM2.5`) +\n  geom_glyph_box(width = 0.08, height = 0.025) +\n  geom_glyph(aes(color = `PM2.5`), width = 0.08, height = 0.025) +\n  geom_text(\n    data = opensense_cubble,\n    aes(x = long, y = lat, label = boxName),\n    nudge_y = 0.02,\n    inherit.aes = FALSE\n  ) +\n  scale_color_viridis_c() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![Glyph map of PM2.5 hourly measurements for openSenseMap stations. ](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}