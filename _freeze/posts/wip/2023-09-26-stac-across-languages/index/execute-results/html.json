{
  "hash": "42b804a8e0f514754fc6130117f78d67",
  "result": {
    "markdown": "---\ntitle: \"STAC across Languages\"\ndescription: |\n  On-demand data cubes with the STAC API for R and Python.\ndate: 2023-09-26\n# image: figs/poster_thumbnail-min.PNG\ncategories:\n  - r-spatial\n  - python\n  - rstats\ndraft: true\n---\n\n\n\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport geogif # render gifs from raster images\nimport geopandas as gpd # handle geospatial data frames\nfrom IPython.display import Image # visualize URLs\nimport pandas as pd # data wrangling\nimport pystac_client # connecting to the STAC API\nfrom rasterio.enums import Resampling # perform resampling operations\nimport rioxarray # handle spatio-temporal arrays\nimport shapely # create vector objects\nimport stackstac # build an on-demand STAC data cube\n```\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # data wrangling\nlibrary(gdalcubes) # on-demand data cubes\nlibrary(ggplot2) # plotting\nlibrary(here) # resolve relative paths\nlibrary(knitr) # visualize URLs\nlibrary(osmdata) # retrieving OSM data, AOI bounding box\nlibrary(rstac) # connecting to the STAC API\nlibrary(sf) # handle geospatial data frames\nlibrary(stars) # handle spatio-temporal arrays\nlibrary(tmap) # visualization\n```\n:::\n\n\n:::\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\napi_url = 'https://earth-search.aws.element84.com/v1'\nclient = pystac_client.Client.open(api_url)\nfor collection in client.get_collections():\n    print(collection)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<CollectionClient id=cop-dem-glo-30>\n<CollectionClient id=naip>\n<CollectionClient id=sentinel-2-l2a>\n<CollectionClient id=sentinel-2-l1c>\n<CollectionClient id=landsat-c2-l2>\n<CollectionClient id=cop-dem-glo-90>\n<CollectionClient id=sentinel-1-grd>\n```\n:::\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_url = \"https://earth-search.aws.element84.com/v1\"\nclient = stac(api_url)\ncollections(client) |> get_request()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n###STACCollectionList\n- collections (7 item(s)):\n  - cop-dem-glo-30\n  - naip\n  - sentinel-2-l2a\n  - sentinel-2-l1c\n  - landsat-c2-l2\n  - cop-dem-glo-90\n  - sentinel-1-grd\n- field(s): collections, links, context\n```\n:::\n:::\n\n\n:::\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = shapely.Point(lon, lat)\n# date range\ntime_extent = '2022-05-01/2022-10-01'\n```\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = st_point(c(lon, lat))\n# date range\ntime_extent = c(\"2022-05-01\", \"2022-10-01\")\n```\n:::\n\n\n:::\n\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsearch = client.search(\n    collections=[collection],\n    intersects=point,\n    datetime=time_extent,\n    query=[\"eo:cloud_cover<10\"],\n)\nitems = search.item_collection()\nlen(items)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8\n```\n:::\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitems = client  |> \n  stac_search(\n      collections = collection,\n      intersects = point, \n      datetime = paste0(time_extent,\"T00:00:00Z\", collapse = \"/\"),\n      limit = 100\n    ) |> \n  post_request() |> \n  items_filter(\n    filter_fn = function(x) {x$properties$`eo:cloud_cover` < 10}\n  )\nitems_length(items)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n:::\n\nTo explore the items as data frames we can either convert to a geopandas table or to an sf table. \n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nitems_df = gpd.GeoDataFrame.from_features(items.to_dict(), crs=\"epsg:4326\")\nitems_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                            geometry  ...                   updated\n0  POLYGON ((16.49848 53.24020, 17.39166 53.22562...  ...  2022-11-06T13:14:57.270Z\n1  POLYGON ((16.49848 53.24020, 17.39346 53.22558...  ...  2022-11-06T12:53:48.090Z\n2  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:12:58.202Z\n3  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:14:37.621Z\n4  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T12:54:05.312Z\n5  POLYGON ((16.49848 53.24020, 17.39346 53.22558...  ...  2022-11-06T12:55:07.931Z\n6  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T12:52:50.337Z\n7  POLYGON ((16.49848 53.24020, 18.14175 53.20819...  ...  2022-11-06T13:16:38.195Z\n\n[8 rows x 42 columns]\n```\n:::\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wrap function around st_as_sf and as_tibble just for nicer printing\nitems_df = items_as_sf(items) |> \n  mutate(fid = row_number())\nst_as_sf(as_tibble(items_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 8 features and 42 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 16.465 ymin: 52.22258 xmax: 18.14175 ymax: 53.2402\nGeodetic CRS:  WGS 84\n# A tibble: 8 × 43\n  `s2:generation_time`        s2:medium_proba_clouds_percenta…¹ `s2:product_uri`\n  <chr>                                                   <dbl> <chr>           \n1 2022-08-26T16:20:59.000000Z                           0.00172 S2A_MSIL2A_2022…\n2 2022-08-16T16:25:57.000000Z                           2.27    S2A_MSIL2A_2022…\n3 2022-08-03T13:51:55.000000Z                           5.69    S2A_MSIL2A_2022…\n4 2022-07-19T11:39:43.000000Z                           0.00007 S2B_MSIL2A_2022…\n5 2022-07-14T17:50:57.000000Z                           1.29    S2A_MSIL2A_2022…\n6 2022-06-27T16:28:10.000000Z                           0.732   S2A_MSIL2A_2022…\n7 2022-06-24T14:39:14.000000Z                           0.00130 S2A_MSIL2A_2022…\n8 2022-06-19T11:43:29.000000Z                           0.0514  S2B_MSIL2A_2022…\n# ℹ abbreviated name: ¹​`s2:medium_proba_clouds_percentage`\n# ℹ 40 more variables: `s2:processing_baseline` <chr>, `grid:code` <chr>,\n#   `s2:product_type` <chr>, `s2:snow_ice_percentage` <dbl>,\n#   `s2:vegetation_percentage` <dbl>, `processing:software` <chr>,\n#   `s2:high_proba_clouds_percentage` <dbl>,\n#   `s2:unclassified_percentage` <dbl>, `s2:water_percentage` <dbl>,\n#   `s2:not_vegetated_percentage` <dbl>, `s2:cloud_shadow_percentage` <dbl>, …\n```\n:::\n:::\n\n:::\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nids = items_df.loc[\n  (items_df['eo:cloud_cover'] <= 2) &\n  (items_df['s2:nodata_pixel_percentage'] <= 10)\n]\nitem = items[ids.index[0]]\nitem.datetime\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndatetime.datetime(2022, 7, 19, 10, 6, 8, 645000, tzinfo=tzutc())\n```\n:::\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nids = items_df |> \n  filter(\n    `eo:cloud_cover` <= 2, `s2:nodata_pixel_percentage` <= 10\n  ) |> \n  pull(fid)\nitem = items$features[[ids[1]]]\nitem$properties$datetime\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-07-19T10:06:08.645000Z\"\n```\n:::\n:::\n\n:::\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nthumbnail = item.assets[\"thumbnail\"].href\nImage(url = thumbnail)\n```\n\n::: {.cell-output-display}\n```{=html}\n<img src=\"https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/33/U/XU/2022/7/S2B_33UXU_20220719_0_L2A/thumbnail.jpg\"/>\n```\n:::\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitem |> \n  assets_url(asset_names = \"thumbnail\") |> \n  include_graphics()\n```\n\n::: {.cell-output-display}\n![](https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/33/U/XU/2022/7/S2B_33UXU_20220719_0_L2A/thumbnail.jpg)\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}