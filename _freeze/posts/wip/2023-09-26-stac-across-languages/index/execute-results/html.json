{
  "hash": "1ebd1a4efaa85d836e27a0b2e5f50b23",
  "result": {
    "markdown": "---\ntitle: \"STAC across Languages\"\ndescription: |\n  On-demand data cubes with the STAC API for R and Python.\ndate: 2023-09-26\n# image: figs/poster_thumbnail-min.PNG\ncategories:\n  - r-spatial\n  - python\n  - rstats\ndraft: true\n---\n\n\n\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport geogif # render gifs from raster images\nimport geopandas as gpd # handle geospatial data frames\nfrom IPython.display import Image # visualize URLs\nimport pandas as pd # data wrangling\nimport pystac_client # connecting to the STAC API\nfrom rasterio.enums import Resampling # perform resampling operations\nimport rioxarray # handle spatio-temporal arrays\nimport shapely # create vector objects\nimport stackstac # build an on-demand STAC data cube\n```\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # data wrangling\nlibrary(gdalcubes) # on-demand data cubes\nlibrary(ggplot2) # plotting\nlibrary(here) # resolve relative paths\nlibrary(knitr) # visualize URLs\nlibrary(osmdata) # retrieving OSM data, AOI bounding box\nlibrary(rstac) # connecting to the STAC API\nlibrary(sf) # handle geospatial data frames\nlibrary(stars) # handle spatio-temporal arrays\nlibrary(tmap) # visualization\n```\n:::\n\n\n:::\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\napi_url = 'https://earth-search.aws.element84.com/v1'\nclient = pystac_client.Client.open(api_url)\nfor collection in client.get_collections():\n    print(collection)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<CollectionClient id=cop-dem-glo-30>\n<CollectionClient id=naip>\n<CollectionClient id=sentinel-2-l2a>\n<CollectionClient id=sentinel-2-l1c>\n<CollectionClient id=landsat-c2-l2>\n<CollectionClient id=cop-dem-glo-90>\n<CollectionClient id=sentinel-1-grd>\n```\n:::\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_url = \"https://earth-search.aws.element84.com/v1\"\nclient = stac(api_url)\ncollections(client) |> get_request()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n###STACCollectionList\n- collections (7 item(s)):\n  - cop-dem-glo-30\n  - naip\n  - sentinel-2-l2a\n  - sentinel-2-l1c\n  - landsat-c2-l2\n  - cop-dem-glo-90\n  - sentinel-1-grd\n- field(s): collections, links, context\n```\n:::\n:::\n\n\n:::\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = shapely.Point(lon, lat)\n# date range\ntime_extent = '2022-05-01/2022-10-01'\n```\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# collection ID\ncollection = 'sentinel-2-l2a'\n# coordinates\nlon = 16.9\nlat = 52.4\npoint = st_point(c(lon, lat))\n# date range\ntime_extent = c(\"2022-05-01\", \"2022-10-01\")\n```\n:::\n\n\n:::\n\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsearch = client.search(\n    collections=[collection],\n    intersects=point,\n    datetime=time_extent,\n    query=[\"eo:cloud_cover<10\"],\n)\nitems = search.item_collection()\nlen(items)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8\n```\n:::\n:::\n\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitems = client  |> \n  stac_search(\n      collections = collection,\n      intersects = point, \n      datetime = paste0(time_extent,\"T00:00:00Z\", collapse = \"/\"),\n      limit = 100\n    ) |> \n  post_request() |> \n  items_filter(\n    filter_fn = function(x) {x$properties$`eo:cloud_cover` < 10}\n  )\nlength(items)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}