{
  "hash": "45b085276b8dcfd4fa0b013dab45cfe3",
  "result": {
    "markdown": "---\ntitle: \"Geospatial Network Visualization\"\ndescription: \"{sfnetworks} meets {ggraph}\"\ndate: 2021-03-05\ncategories:\n  - r-spatial\n  - dataviz\n  - networks\nimage: figs/preview.png\n---\n\n\n\n<STYLE type='text/css' scoped>\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\n</STYLE>\n\n\n# Welcome to my website!\nThis is the first entry for my brand new website built with `distill`. I hope you find this and hopefully the coming posts useful! So let's get to it!\n\n# What is this about?\n\n<center>\n<a href=\"https://luukvdmeer.github.io/sfnetworks/\"><img src=\"https://raw.githubusercontent.com/luukvdmeer/sfnetworks/master/man/figures/logo.png\" width=\"150px\"/></a> \n<a href=\"https://ggraph.data-imaginist.com/\"><img src=\"https://raw.githubusercontent.com/thomasp85/ggraph/master/man/figures/logo.png\" width=\"150px\"/></a>\n</center>\n\nThis post is to document my personal exploration on how to visualize spatial networks created with `sfnetworks` using `ggraph`. This all started with a [sfnetworks hackathon](https://github.com/sfnetworks/sfnetworks_viz){target=\"_blank\"} and should end with a successful pull request (PR) to `ggraph`. \n\nI should start by saying, that it is probably a good idea to get familiar with `ggraph` (and `tidygraph` and `sfnetworks` while you are at it!) before going through this post. \n\nIf you are already a `ggraph` + `tidygraph` user and would like to apply the possibilities to the *spatial domain*, then this is definitely a resource for you and a good opportunity to learn about sfnetworks!\n\n# What can be done?\n\nThere are already several possibilities to use sfnetworks and ggraph together. *Why?* you may be wondering. Well because ggraph was built as a way to visualize `tbl_graph`s from tidygraph, and guess what? `sfnetwork` objects sub-classes `tbl_graph`.\nLet's look at the `roxel` demo dataset from sfnetworks. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sfnetworks)\nlibrary(sf)\nnet = as_sfnetwork(roxel, directed = F)\nclass(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sfnetwork\" \"tbl_graph\" \"igraph\"   \n```\n:::\n:::\n\n\nSo basically you can do all sort of crazy graph representations with an `sfnetwork` already. \n\nThe real aim of this integration is to allow you to do all this crazy graph representations **+** graph representations in geographical space! Not everything is possible yet, and you will see below some limitations. \n\nFor now I will illustrate how, with the current *status quo*, we can already integrate `sfnetworks` and `ggraph` for spatial network visualizations. So let's get started!\n\n# The Three Pillars\n\nWe need to start with **three** main concepts, the essential elements to create any `ggraph` visualization:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n1. *Layouts* contain the vertical and horizontal placement of the nodes, giving them a physical placement. In spatial terms, they contain the coordinates of where each node should be mapped. \n\n2. *Nodes* refer to which representation the nodes should have. And this really refers to which visual representation they should have, known in `ggplot2` as `geom`. Should they be points, tiles, voronoi polygons? `ggraph` contains a large list of node representations via `geom_node_*()`.\n\n3. *Edges* refer to the way nodes are connected between each other visually. Again here we are talking about `ggplot2` geometries and the `geom_edge_*()` functions should give you a big pool of options to represent this. \n\nLet's go through the possibilities to combine these elements with `sfnetwork` objects.\n\n## 1. `layout_sf()`\n\nAs mentioned before, a *layout* is basically the physical representation of where to place our nodes. When we are dealing with non-spatial network representations we must remember that the nodes are not meant to represent actual locations on Earth, but can be placed anywhere. ggraph provides several algorithms to make this happen. Let's take one of the examples in the [ggraph layout vignette](https://ggraph.data-imaginist.com/articles/Layouts.html){target=\"_blank\"} to illustrate. This will include the *layout* + *nodes* + *edges* in a non-geographical representation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(tidyverse)\nggraph(\n  filter(net, group_components() == 1), \n  layout = 'focus', \n  focus = node_is_center()\n) + \n  ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), data.frame(r = 1:5), colour = 'grey') + \n  geom_edge_link() + \n  geom_node_point() + \n  coord_fixed()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nBut when talking about geospatial networks, we would usually want to place the nodes in their geographical location. A really nice thing about `ggraph`, is that you can give your own customized layout, by passing custom X and Y coordinates for node placement!\n\nIn sfnetworks, we have a spatial network consisting of nodes and edges. Since we have a nice integration with `sf`, we can extract the coordinates of our nodes as an X and Y coordinate dataframe, which we can pass to `ggraph`. Let me give you a quick demo instead of all these words. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='color: #555555;'># A sfnetwork with</span> <span style='color: #555555;'>701</span> <span style='color: #555555;'>nodes and</span> <span style='color: #555555;'>851</span> <span style='color: #555555;'>edges\n#\n# CRS: </span> <span style='color: #555555;'>EPSG:4326</span> <span style='color: #555555;'>\n#\n# An undirected multigraph with 14 components with spatially explicit edges\n#\n# A tibble: 701 × 1</span>\n             geometry\n          <span style='color: #555555; font-style: italic;'>&lt;POINT [°]&gt;</span>\n<span style='color: #555555;'>1</span> (7.533722 51.95556)\n<span style='color: #555555;'>2</span> (7.533461 51.95576)\n<span style='color: #555555;'>3</span> (7.532442 51.95422)\n<span style='color: #555555;'>4</span>  (7.53209 51.95328)\n<span style='color: #555555;'>5</span> (7.532709 51.95209)\n<span style='color: #555555;'>6</span> (7.532869 51.95257)\n<span style='color: #555555;'># ℹ 695 more rows</span>\n<span style='color: #555555;'>#\n# A tibble: 851 × 5</span>\n   from    to name                  type                                geometry\n  <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span>                 <span style='color: #555555; font-style: italic;'>&lt;fct&gt;</span>                       <span style='color: #555555; font-style: italic;'>&lt;LINESTRING [°]&gt;</span>\n<span style='color: #555555;'>1</span>     1     2 Havixbecker Strasse   residential (7.533722 51.95556, 7.533461 51…\n<span style='color: #555555;'>2</span>     3     4 Pienersallee          secondary   (7.532442 51.95422, 7.53236 51.…\n<span style='color: #555555;'>3</span>     5     6 Schulte-Bernd-Strasse residential (7.532709 51.95209, 7.532823 51…\n<span style='color: #555555;'># ℹ 848 more rows</span>\n</CODE></PRE>\n\n```{.r .cell-code}\nnet %>% st_coordinates() %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            X        Y\n[1,] 7.533722 51.95556\n[2,] 7.533461 51.95576\n[3,] 7.532442 51.95422\n[4,] 7.532090 51.95328\n[5,] 7.532709 51.95209\n[6,] 7.532869 51.95257\n```\n:::\n:::\n\n\nNow, how do we create a layout that extracts the coordinates automatically? Well here is a little helper function that will take care of that for you. It will extract the X and Y coordinates of any `sfnetwork` object into a data.frame that is understood by `ggraph()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayout_sf = function(graph){\n  # Extract X and Y coordinates from the nodes\n  graph = activate(graph, \"nodes\")\n  x = sf::st_coordinates(graph)[,\"X\"]\n  y = sf::st_coordinates(graph)[,\"Y\"]\n  data.frame(x, y)\n}\n```\n:::\n\n\nHow do we use it? Well, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggraph)\nggraph(net, layout = layout_sf)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nYes! That's it. You are probably looking now at a beautiful blank canvas, but internally `ggraph()` has already a plan for every node you will map next, let's see it in action in the next step.\n\n## 2. `geom_node_*()`\n\nThe most obvious way to represent a node in space is with a point. This is how we would do it if we were plotting `POINT` geometries in space. With ggraph we can get that representation with `geom_node_point()`. Note that other useful node representations in space might be using a label or text. We can achieve that with `geom_node_label()` and `geom_node_text()`, respectively.\n\nBuilding on our previous plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout = layout_sf) +\n  geom_node_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nOh yes, there are our nodes! But wait... If you are familiar with the sfnetworks vignettes, you might be thinking: *this looks distorted...* and yes, it does. \n\nUnfortunately, `ggraph()` does not know about coordinate reference systems (CRS) so it will accommodate your X and Y axes to the size of your plot. This is one of the reasons why some internal tweaks are needed in ggraph to make this work better. But for now a way to go around this is to use `coord_sf()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout = layout_sf) +\n  geom_node_point() +\n  coord_sf(crs = st_crs(net))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nMuch better. Now, our plot also takes into consideration the CRS and places our nodes properly. \n\nNow let's give some aesthetics to our plot. If you scroll back up, you will see that our nodes don't have attributes, other than their geometry, so what should we look at? What about the degree centrality of the node? This will calculate the number of incident edges for each of our nodes. We can do this with the `centrality_degree()` function in `tidygraph`.\n\nA really nice feature about `ggraph` is that we don't need to go back to our original graph, mutate our network, save as a new object, and then call it again inside `ggraph()`. We can just call the function directly inside the `aes()`, where the calculation will be done on the fly! [Read more about it here.](https://ggraph.data-imaginist.com/articles/tidygraph.html#access-to-tidygraph-algorithms-in-ggraph-code-1){target=\"_blank\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygraph)\nggraph(net, layout = layout_sf) +\n  geom_node_point(aes(color = centrality_degree())) +\n  coord_sf(crs = st_crs(net))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nDirectly passing functions also works inside `facet_*()` functions. sfnetworks has a couple of functions that can be evaluated in this way. To illustrate we can use `node_X()`, which gives us the **X** coordinate of the nodes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout = layout_sf) +\n  geom_node_point(aes(color = centrality_degree())) +\n  coord_sf(crs = st_crs(net)) +\n  facet_nodes(~node_X() > 7.535)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nOK, probably not a real-world case scenario, but it gives an overview of what can be done! \n\nLet's move on to the final step, and connect these nodes to each other. \n\n## 3. `geom_edge_*()`\n\nNow comes the tricky part. When we are working with graph structures in, let's call it, \"abstract\" space, the connections between the nodes are basically straight lines between each `from` and `to` pair. Although `ggraph` has quite a long list to represent edges ([see here](https://ggraph.data-imaginist.com/reference/index.html#section-edges){target=\"_blank\"}), the connections that I find most relevant for spatial networks are `geom_edge_link()` and `geom_edge_arc()`, which create a straight line or an arc between connected nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout_sf) +\n  geom_edge_arc() +\n  geom_node_point() +\n  coord_sf(crs = st_crs(net))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nYes, I bet you are thinking this could go to [accidental aRt](https://twitter.com/accidental__aRt){target=\"_blank\"}. But depending on the visualization you are creating, this `geom` can come in handy for some data cases, you can see it in action at [the end of this post](#show-me-more)!\n\nBut now let's look at straight lines or *links* between our nodes. We can of course pass aesthetics to all the `geom_edge_*()` functions, which refer to edge attributes. Let's color our edges by the type of road:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout_sf) +\n  geom_edge_link(aes(color = type)) +\n  geom_node_point(size = 0.75) +\n  coord_sf(crs = st_crs(net))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nI know that for now you must be wondering: if we have a spatial set of edges with an explicit geometry, why are we just drawing plain lines? Well, remember I said this would be tricky? This is exactly what is missing from ggraph and the core of what I eventually want to implement. \n\nBut, do not despair! I am here to show you some workarounds, not fully ideal but something to work with in the meantime. Let's remember that ggraph subclasses a `ggplot` object, so we can combine ggplot2 functions, and any other package that extends the grammar of graphics. \n\nWe will resort to `geom_sf()` for now. We can plot the edges of our network, by extracting them as an `sf` object with the function `st_as_sf()`. We have implemented a shortcut that allows you to choose which element of the network (nodes or edges), you want to activate and extract. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout = layout_sf) +\n  geom_sf(data = st_as_sf(net, \"edges\")) +\n  geom_node_point() +\n  coord_sf(crs = st_crs(net))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nAnd there we go, a nice representation of a geospatial network! We can of course pass some aesthetics as well, for example an spatial edge predicate implemented in sfnetworks: `edge_circuity()`. You will see now that we can pass these predicates directly to the aesthetics inside `geom_sf()` and since our main object is a `ggraph` this expression will be evaluated in the network, pretty exciting!!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout = layout_sf) +\n  geom_sf(\n    data = st_as_sf(net, \"edges\"), size = 0.8,\n    aes(color = as.numeric(edge_circuity()))\n  ) +\n  scale_color_viridis(\"Circuity\") +\n  coord_sf(crs = st_crs(net))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\nAnd there you have it, a swift overview of how to use `ggraph` and `sfnetworks` together. \n\n# What can't be done?\n\nSo yes, a lot can be done already, but as you may have noticed, there are certain things that just don't work yet with the current `ggraph` implementation. Here is a **not at all** comprehensive list of things that need some work:\n\n- The `layout_sf()` function I showed you above will not work when there are columns named `x` or `y`.\n- `ggraph()` does not consider the network CRS.\n- There is no way yet to plot spatially explicit edges inside ggraph.\n\nThis last one comes with a couple more problems:\n\n### Multiple scales for the same aesthetic\n\nWith `ggraph` one can give \"color\", \"fill\", \"size/width\", etc. aesthetics to both the nodes and the edges. In our current workaround this is not working so good. The plot will get rendered properly with the corresponding colors, but the legend does not know what to do, and will only use one of the scale elements, without a warning!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout = layout_sf) +\n  geom_sf(\n    data = st_as_sf(net, \"edges\"), \n    aes(color = as.numeric(edge_circuity()))\n  ) +\n  geom_node_point(\n    aes(color = centrality_betweenness())\n  ) +\n  coord_sf(crs = st_crs(net))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### Faceting edges\n\nAnother missing stone is faceting by edges. This currently gives an error: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(net, layout = layout_sf) +\n  geom_sf(data = st_as_sf(net, \"edges\")) +\n  facet_edges(~type)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in seq_len(length(data) - 1): argument must be coercible to non-negative integer\n```\n:::\n:::\n\n\nWhat to do then? Remember that I mention a PR? Well, I am working there to fix these issues, some of them already have a fix, others don't. I would certainly appreciate any help I can get. I opened [an issue](https://github.com/thomasp85/ggraph/issues/275){target=\"_blank\"} to illustrate the progress of my PR. Basically I am stuck with understanding `ggproto` objects to allow an integration of edges in geographical space. \n\nIf you feel like exploring what I have got so far, install `ggraph` from my forked repo. Beware, this will replace the original `ggraph`, so do this under your own risk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"loreabad6/ggraph\")\n```\n:::\n\n\n# Show me more!\n\nWhile testing my `ggraph` implementation, I started looking for some spatial network visualization examples done with R that I could recreate with my code. Here I added two examples of what I came up with, and will probably add more to [this GitHub repository](https://github.com/loreabad6/ggraph-spatial-examples){target=\"_blank\"} if you are interested in following it up. Bear in mind that most of these examples are created with `remotes::install_github(\"loreabad6/ggraph\")`.\n\n### Break Free from Plastic \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/loreabad6/TidyTuesday/master/plot/2021_week_05.png){fig-align='center'}\n:::\n:::\n\n\n::: {.column-margin}\nFor week 5 of 2021 in the [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday){target=\"_blank\"} weekly data project, we analyzed data from the \"Break Free from Plastic\" initiative. Here is a [step by step guide](https://github.com/loreabad6/TidyTuesday/blob/master/R/2021/week_05.md){target=\"_blank\"} on how to recreate the final plot.\n:::\n\n\n### Airports in the U.S.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/loreabad6/ggraph-spatial-examples/main/figs/us_airports.png){fig-align='center' width=75%}\n:::\n:::\n\n\n::: {.column-margin}\nThis example is inspired on this [wonderful blogpost on Network Visualization](https://kateto.net/sunbelt2019#overlaying-networks-on-geographic-maps){target=\"_blank\"} by Katherine Ognyanova, where I tried to recreate the last plot showing airport connections and visitors in the U.S. Here is the [code to reproduce](https://github.com/loreabad6/ggraph-spatial-examples/blob/main/code/airports.R){target=\"_blank\"}.\n:::\n\n### The fourth way of visualizing a graph on a map\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/loreabad6/ggraph-spatial-examples/main/figs/graph_on_a_map.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.column-margin}\nIn his [very helpful blogpost](https://datascience.blog.wzb.eu/2018/05/31/three-ways-of-visualizing-a-graph-on-a-map/){target=\"_blank\"}, Markus Neteler guides us through three different ways to plot a spatial graph on a map. With the `ggraph` and `sfnetworks` combination, we can add a fourth way! [Check here how to recreate this plot.](https://github.com/loreabad6/ggraph-spatial-examples/blob/main/code/graph-on-a-map.R){target=\"_blank\"}\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}